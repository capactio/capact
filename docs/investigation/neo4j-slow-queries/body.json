{
  "query": "# This file contains example GraphQL operations for Public OCH.\n# How to use it: Copy and paste the full content to GraphQL Playground or external GraphQL client.\n\n# To use all queries without specifying your own variables, use the JSON from `examples.variables.json` file.\n\n\nquery SingleQuery($interfaceGroupPath: NodePath!, $interfaceGroupPrefixPattern: NodePathPattern!, $interfacePath: NodePath!, $interfacesPrefixPattern: NodePathPattern!, $implementationPath: NodePath!, $implementationsPrefixPattern: NodePathPattern!, $typePath: NodePath!, $attributesPrefixPattern: NodePathPattern!, $attributePath: NodePath!, $typesPrefixPattern: NodePathPattern!) {\n    repoMetadata: repoMetadata {\n        path\n        name\n        prefix\n        revision(revision: \"0.1.0\") {\n            ...RepoMetadataRevision\n        }\n        latestRevision {\n            ...RepoMetadataRevision\n        }\n        revisions {\n            ...RepoMetadataRevision\n        }\n    }\n    interfaceGroup: interfaceGroup(path: $interfaceGroupPath) {\n        ...InterfaceGroup\n    }\n    interfaceGroups: interfaceGroups {\n        ...InterfaceGroup\n    }\n    interfaceGroupsWithPrefixFilter: interfaceGroups(filter: { prefixPattern: $interfaceGroupPrefixPattern }) {\n        ...InterfaceGroup\n    }\n    interfaceGroupsWithInterfacesAndImplementations: interfaceGroups {\n        ...InterfaceGroup\n        interfaces {\n            name\n            prefix\n            path\n            revision(revision: \"0.1.0\") {\n                ...InterfaceRevision\n            }\n            latestRevision {\n                ...InterfaceRevision\n            }\n            revisions {\n                ...InterfaceRevision\n                ...ImplementationsForInterface\n            }\n        }\n    }\n    interface: interface(path: $interfacePath) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...InterfaceRevision\n        }\n        latestRevision {\n            ...InterfaceRevision\n        }\n        revisions {\n            ...InterfaceRevision\n        }\n    }\n    interfaces: interfaces {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...InterfaceRevision\n        }\n        latestRevision {\n            ...InterfaceRevision\n        }\n        revisions {\n            ...InterfaceRevision\n        }\n    }\n    InterfacesWithImplementations: interfaces {\n        path\n        revisions {\n            ...InterfaceRevision\n            ...ImplementationsForInterface\n        }\n    }\n    InterfacesWithPrefixFilter: interfaces(filter: { prefixPattern: $interfacesPrefixPattern }) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...InterfaceRevision\n        }\n        latestRevision {\n            ...InterfaceRevision\n        }\n        revisions {\n            ...InterfaceRevision\n        }\n    }\n    implementation: implementation(path: $implementationPath) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...ImplementationRevision\n        }\n        latestRevision {\n            ...ImplementationRevision\n        }\n        revisions {\n            ...ImplementationRevision\n        }\n    }\n    implementations: implementations {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...ImplementationRevision\n        }\n        latestRevision {\n            ...ImplementationRevision\n        }\n        revisions {\n            ...ImplementationRevision\n        }\n    }\n    implementationsFilter: implementations(filter: { prefixPattern: $implementationsPrefixPattern }) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...ImplementationRevision\n        }\n        latestRevision {\n            ...ImplementationRevision\n        }\n        revisions {\n            ...ImplementationRevision\n        }\n    }\n    typeByPath: type(path: $typePath) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...TypeRevision\n        }\n        latestRevision {\n            ...TypeRevision\n        }\n        revisions {\n            ...TypeRevision\n        }\n    }\n    types: types {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...TypeRevision\n        }\n        latestRevision {\n            ...TypeRevision\n        }\n        revisions {\n            ...TypeRevision\n        }\n    }\n    typesWithFilter: types(filter: { prefixPattern: $typesPrefixPattern }) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...TypeRevision\n        }\n        latestRevision {\n            ...TypeRevision\n        }\n        revisions {\n            ...TypeRevision\n        }\n    }\n    attribute: attribute(path: $attributePath) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...AttributeRevision\n        }\n        latestRevision {\n            ...AttributeRevision\n        }\n        revisions {\n            ...AttributeRevision\n        }\n    }\n    attributes: attributes {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...AttributeRevision\n        }\n        latestRevision {\n            ...AttributeRevision\n        }\n        revisions {\n            ...AttributeRevision\n        }\n    }\n    attributesWithFilter: attributes(filter: { prefixPattern: $attributesPrefixPattern }) {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...AttributeRevision\n        }\n        latestRevision {\n            ...AttributeRevision\n        }\n        revisions {\n            ...AttributeRevision\n        }\n    }\n}\n\n\n#\n# Fragments with all possible fields for Public OCH entities\n#\n\nfragment InterfaceGroup on InterfaceGroup {\n    metadata {\n        ...GenericMetadata\n    }\n    interfaces {\n        name\n        prefix\n        path\n        revision(revision: \"0.1.0\") {\n            ...InterfaceRevision\n        }\n        latestRevision {\n            ...InterfaceRevision\n        }\n        revisions {\n            ...InterfaceRevision\n        }\n    }\n}\n\nfragment GenericMetadata on MetadataBaseFields {\n    prefix\n    path\n    name\n    displayName\n    description\n    maintainers {\n        name\n        email\n    }\n    iconURL\n    documentationURL\n    supportURL\n    iconURL\n}\n\nfragment InterfaceRevision on InterfaceRevision {\n    metadata {\n        prefix\n        path\n        name\n        displayName\n        description\n        maintainers {\n            name\n            email\n        }\n        iconURL\n    }\n    revision\n    spec {\n        input {\n            parameters {\n                jsonSchema\n            }\n            typeInstances {\n                name\n                typeRef {\n                    path\n                    revision\n                }\n                verbs\n            }\n        }\n        output {\n            typeInstances {\n                name\n                typeRef {\n                    path\n                    revision\n                }\n            }\n        }\n    }\n    signature {\n        och\n    }\n}\n\nfragment ImplementationRevision on ImplementationRevision {\n    metadata {\n        ...GenericMetadata\n        attributes {\n            ...AttributeRevision\n        }\n    }\n    revision\n    spec {\n        appVersion\n        implements {\n            path\n            revision\n        }\n        requires {\n            prefix\n            oneOf {\n                typeRef {\n                    path\n                    revision\n                }\n                valueConstraints\n            }\n            anyOf {\n                typeRef {\n                    path\n                    revision\n                }\n                valueConstraints\n            }\n            allOf {\n                typeRef {\n                    path\n                    revision\n                }\n                valueConstraints\n            }\n        }\n        imports {\n            interfaceGroupPath\n            alias\n            appVersion\n            methods {\n                name\n                revision\n            }\n        }\n        additionalInput {\n            typeInstances {\n                name\n                typeRef {\n                    path\n                    revision\n                }\n                verbs\n            }\n        }\n        additionalOutput {\n            typeInstances {\n                name\n                typeRef {\n                    path\n                    revision\n                }\n            }\n            typeInstanceRelations {\n                typeInstanceName\n                uses\n            }\n        }\n        action {\n            runnerInterface\n            args\n        }\n    }\n    signature {\n        och\n    }\n}\n\nfragment AttributeRevision on AttributeRevision {\n    metadata {\n        ...GenericMetadata\n    }\n    revision\n    spec {\n        additionalRefs\n    }\n    signature {\n        och\n    }\n}\n\nfragment TypeRevision on TypeRevision {\n    revision\n    metadata {\n        ...GenericMetadata\n        attributes {\n            ...AttributeRevision\n        }\n    }\n    spec {\n        additionalRefs\n        jsonSchema\n    }\n    signature {\n        och\n    }\n}\n\nfragment RepoMetadataRevision on RepoMetadataRevision {\n    revision\n    metadata {\n        ...GenericMetadata\n    }\n    spec {\n        ochVersion\n        ocfVersion {\n            supported\n            default\n        }\n        implementation {\n            appVersion {\n                semVerTaggingStrategy {\n                    latest {\n                        pointsTo\n                    }\n                }\n            }\n        }\n    }\n    signature {\n        och\n    }\n}\n\n# Additional resolvers for Interface\nfragment ImplementationsForInterface on InterfaceRevision {\n    implementationRevisions {\n        ...ImplementationRevision\n    }\n}\n",
  "variables": {
    "interfaceGroupPath": "cap.interface.productivity.jira",
    "interfaceGroupPrefixPattern": "cap.interface.*",
    "interfacePath": "cap.interface.productivity.jira.install",
    "interfacesPrefixPattern": "cap.interface.*",
    "implementationPath": "cap.implementation.atlassian.jira.install",
    "implementationsPrefixPattern": "cap.implementation.gcp.*",
    "typePath": "cap.core.type.networking.hostname",
    "typesPrefixPattern": "cap.core.type.*",
    "attributePath": "cap.core.attribute.workload.stateless",
    "attributesPrefixPattern": "cap.core.attribute.workload.*"
  }
}

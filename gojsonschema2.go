// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"

// An explanation about the purpose of this instance.
type JsonSchemaTypeJsonRef struct {
	// Reference to OCF Type for example, cap.type.db.mysql.config
	Name string `json:"name"`

	// Revision corresponds to the JSON schema field "revision".
	Revision string `json:"revision"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JsonSchemaTypeJsonRef) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["revision"]; !ok || v == nil {
		return fmt.Errorf("field revision: required")
	}
	type Plain JsonSchemaTypeJsonRef
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = JsonSchemaTypeJsonRef(plain)
	return nil
}

// The JSONSchema definition.
type JsonSchemaTypeJson struct {
	// An explanation about the purpose of this instance.
	Ref *JsonSchemaTypeJsonRef `json:"ref,omitempty"`

	// Inline JSON Schema definition for the parameters.
	Value *string `json:"value,omitempty"`
}

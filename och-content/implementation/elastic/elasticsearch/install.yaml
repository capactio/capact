ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.elastic.elasticsearch
  name: install
  displayName: Install Elasticsearch
  description: Action which installs Elasticsearch via Helm chart
  documentationURL: https://github.com/elastic/helm-charts/tree/7.11/elasticsearch
  supportURL: https://github.com/elastic/helm-charts
  iconURL: https://helm.elastic.co/icons/elasticsearch.png
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "7.11.2-SNAPSHOT"

  outputTypeInstanceRelations:
    elasticsearch:
      uses:
        - elasticsearch-helm-release

  implements:
    - path: cap.interface.analytics.elasticsearch.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: elasticsearch
        templates:
          - name: elasticsearch
            inputs:
              artifacts:
                # Capact Engine will inject the 'input-parameters' artifacts into the workflow entrypoint.
                - name: input-parameters
            outputs:
              artifacts:
                - name: elasticsearch
                  from: "{{steps.helm-install.outputs.artifacts.additional}}"
            steps:
              # Here we prepare the input for K8s Secret creation.
              - - name: render-secret-manifest
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              generateName: elastic-basic-auth
                            type: kubernetes.io/basic-auth
                            stringData:
                              username: elastic
                              password: <@ random_word(length=20) @>
                      - name: input-parameters
                        raw:
                          data: ""
                      - name: configuration
                        raw:
                          data: ""
              - - name: create-basic-auth-secret
                  template: kubectl-create
                  arguments:
                    artifacts:
                      - name: manifest
                        from: "{{steps.render-secret-manifest.outputs.artifacts.render}}"

              # Here we prepare the input for the Helm runner.
              - - name: render-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "elasticsearch"
                              repo: "https://helm.elastic.co"
                              version: "7.11.1"
                            output:
                              goTemplate: |
                                version: "{{ .Values.imageTag }}"
                              <% if host %>
                                host: "{{ (index .Values.ingress.hosts 0).host }}"
                                port: 80
                              <% else %>
                                host: "{{ template \"elasticsearch.masterService\" . }}.{{ .Release.Namespace }}"
                                port: "{{ .Values.httpPort }}"
                              <% endif %>
                                basicAuthSecretName: <@ metadata.name @>
                            values:
                              imageTag: 7.4.1
                              replicas: <@ replicas | default('3')@>
                              esConfig:
                                elasticsearch.yml: |
                                  network.host: 0.0.0.0
                                  xpack.security.enabled: true
                                  xpack.security.transport.ssl.enabled: true
                              extraEnvs:
                                - name: ELASTIC_PASSWORD
                                  valueFrom:
                                    secretKeyRef:
                                      name: <@ metadata.name @>
                                      key: password
                                - name: ELASTIC_USERNAME
                                  valueFrom:
                                    secretKeyRef:
                                      name: <@ metadata.name @>
                                      key: username
                              <% if host %>
                              ingress:
                                enabled: true
                                annotations:
                                  acmechallengetype: http01
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/ingress.class: nginx
                                  kubernetes.io/tls-acme: "true"
                                tls:
                                  - secretName: elasticsearch-server-tls-<@ random_word(length=5) @>
                                    hosts:
                                      - <@ host @>
                                hosts:
                                - host: <@ host @>
                                  paths:
                                    - path: '/'
                              <% endif %>
                      - name: input-parameters
                        from:  "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: ""

              - - name: fill-secret-name-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-basic-auth-secret.outputs.artifacts.manifest}}"
                      - name: configuration
                        raw:
                          data: ""

              # Execute the Helm runner, with the input parameters created in the previous step.
              # This will create the Helm chart and deploy our Elasticsearch instance
              #
              # To delete this release, you can use `helm uninstall`.
              # The release name is available in elasticsearch-helm-release TypeInstance.
              # Additionally, remove PVCs as they are not remove as a part of helm uninstall.
              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: elasticsearch         # Defining the output TypeInstance 'elasticsearch-config'
                      from: additional
                    - name: elasticsearch-helm-release   # Defining the output TypeInstance 'elasticsearch-helm-release'
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-secret-name-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

          # You can always run custom images, we use the kubectl image to create a K8s resources
          # it will use the same serviceAccount as `helm install`
          - name: kubectl-create
            inputs:
              artifacts:
                - name: manifest
                  path: "/in/manifest.yaml"
            outputs:
              artifacts:
                - name: manifest
                  path: "/tmp/manifest.yaml"
            container:
              image: bitnami/kubectl:1.18
              command: [sh, -c]
              args: ["kubectl create -f {{inputs.artifacts.manifest.path}} --output=yaml > {{outputs.artifacts.manifest.path}}"]


signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.rocketchat.rocketchat
  name: install
  displayName: Install Rocket.Chat
  description: Action which installs Rocket.Chat via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/rocketchat-server
  supportURL: https://docs.rocket.chat/installation/automation-tools/helm-chart
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
      url: https://projectvoltron.dev

spec:
  appVersion: "3.6.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.mongodb.config
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
    rocketchat-config:
      uses:
        - rocketchat-helm-release
        - mongodb

  implements:
    - path: cap.interface.productivity.rocketchat.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.mongodb
      alias: mongodb
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: rocketchat-install
        templates:
          - name: rocketchat-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: mongodb
                  optional: true
            steps:
              - - name: install-db
                  voltron-when: mongodb == nil # conditional execution
                  voltron-action: mongodb.install
                  voltron-outputTypeInstances:
                    - name: mongodb
                      from: mongodb
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            user:
                              username: "mongo"
                            defaultDBName: "mongo"

              - - name: render-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            command: "install"
                            generateName: true
                            chart:
                              name: "rocketchat"
                              repo: "https://charts.helm.sh/stable"
                            values:
                              image:
                                pullPolicy: Always
                              mongodb:
                                enabled: false
                              <% set mongo_addr = mongo.host + ':' + mongo.port %>
                              <% set mongo_url = 'mongodb://' + mongo.user.username + ':' + mongo.user.password + '@' + mongo_addr %>
                              externalMongodbUrl: "<@ mongo_url @>/<@ mongo.defaultDBName @>"
                              <% set oplog_mongo_url = 'mongodb://root:' + mongo.rootPassword + '@' + mongo_addr + '/local?replicaSet=rs0&authSource=admin' %>
                              externalMongodbOplogUrl: "<@ oplog_mongo_url @>"
                              ingress:
                                enabled: true
                                annotations:
                                  acmechallengetype: http01
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/ingress.class: nginx
                                  kubernetes.io/tls-acme: "true"
                                tls:
                                  - secretName: rocketchat-server-tls-<@ random_word(length=5) @>
                                    hosts:
                                      - <@ input.host @>
                                hosts:
                                - host: <@ input.host @>
                                  paths: ['/']
                            output:
                              goTemplate:
                                host: "{{ (index .Values.ingress.hosts 0).host }}"
                                version: "{{ .Values.image.tag }}"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.mongodb}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: mongo

              - - name: fill-input-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: helm-run
                  voltron-action: helm.run
                  voltron-outputTypeInstances:
                    - name: rocketchat-config
                      from: additional
                    - name: rocketchat-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-input-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

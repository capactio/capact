ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.rocketchat.helm
  name: install
  displayName: Install Rocket.Chat
  description: Action which installs Rocket.Chat via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/rocketchat-server
  supportURL: https://docs.rocket.chat/installation/automation-tools/helm-chart
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "3.6.x"

  additionalInput:
    typeInstances:
      mongodb:
        typeRef:
          path: cap.type.database.mongodb.config
          revision: 0.1.0
        verbs: [ "get" ]
    parameters:
      typeRef:
        path: cap.type.rocketchat.helm.install-input
        revision: 0.1.0

  outputTypeInstanceRelations:
    rocketchat-config:
      uses:
        - rocketchat-helm-release
        - mongodb

  implements:
    - path: cap.interface.productivity.rocketchat.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.mongodb
      alias: mongodb
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: rocketchat-install
        templates:
          - name: rocketchat-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: mongodb
                  optional: true
                - name: additional-parameters
                  optional: true
            steps:
              - - name: install-db
                  capact-when: mongodb == nil # conditional execution
                  capact-action: mongodb.install
                  capact-outputTypeInstances:
                    - name: mongodb
                      from: mongodb
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            user:
                              username: "mongo"
                            defaultDBName: "mongo"

              - - name: render-mongodb-connection-url
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            <%- set ns = namespace(replicas="") %>
                            <% for r in mongo.replicas -%>
                              <%- set ns.replicas = ns.replicas + r %>
                              <% if not loop.last -%>
                                <%- set ns.replicas = ns.replicas + "," %>
                              <%- endif %>
                            <%- endfor %>
                            mongoURL: "mongodb://<@ mongo.user.username @>:<@ mongo.user.password@>@<@ ns.replicas @>/<@ mongo.defaultDBName @>?replicaSet=<@ mongo.replicaSetName @>"
                            oplogURL: "mongodb://root:<@ mongo.rootPassword@>@<@ ns.replicas @>/local?replicaSet=<@ mongo.replicaSetName @>&authSource=admin"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.mongodb}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: mongo

              - - name: fill-default-input
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: template
                        raw:
                          data: |
                            host: <@ input.host @>
                            smtp:
                              enabled: <@ input.smtp.enabled | default(false) | tojson @>
                              username: "<@ input.smtp.username | default('') @>"
                              password: "<@ input.smtp.password | default('') @>"
                              host: "<@ input.smtp.host | default('') @>"
                              port: <@ input.smtp.port | default(587) @>
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: render-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "rocketchat"
                              repo: "https://charts.helm.sh/stable"
                            values:
                              mongodb:
                                enabled: false
                              externalMongodbUrl: <@ mongo.mongoURL @>
                              externalMongodbOplogUrl: <@ mongo.oplogURL @>

                              ingress:
                                enabled: <@ additionalinput.ingress.enabled | default(true) | tojson @>
                                annotations:
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/ingress.class: nginx
                                  kubernetes.io/tls-acme: "true"
                                path: '/'
                                tls:
                                  - secretName: rocketchat-server-tls-<@ random_word(length=5) @>
                                    hosts:
                                      - <@ input.host @>
                              image:
                                repository: <@ additionalinput.image.repository | default("docker.io/rocketchat/rocket.chat") @>
                                tag: <@ additionalinput.image.tag | default("3.13.1") @>
                                pullPolicy: <@ additionalinput.image.pullPollicy | default("IfNotPresent") @>

                              host: <@ input.host @>

                              replicaCount: <@ additionalinput.replicaCount |default(3) @>
                              minAvailable: <@ additionalinput.minAvailable | default(1) @>

                              smtp:
                                enabled: <@ input.smtp.enabled @>
                                username: <@ input.smtp.username @>
                                password: <@ input.smtp.password @>
                                host: <@ input.smtp.host @>
                                port: <@ input.smtp.port @>

                              extraEnv: |
                                - name: EXIT_UNHANDLEDPROMISEREJECTION
                                  value: "true"

                              podAntiAffinity: <@ additionalinput.podAntiAffinity | default("soft") @>
                              podAntiAffinityTopologyKey: <@ additionalinput.podAntiAffinityTopologyKey | default("kubernetes.io/hostname") @>
                              affinity: <@ additionalinput.affinity | default({}) @>

                              # persistence is used for storing file uploads, if disabled then MongoDB is used
                              persistence:
                                enabled: <@ additionalinput.persistence.enabled | default(false) | tojson @>
                                existingClaim: <@ additionalinput.persistence.existingClaim | default("") @>
                                storageClass: <@ additionalinput.persistence.storageClass | default("") @>
                                accessMode: <@ additionalinput.persistence.accessMode | default("ReadWriteOnce") @>
                                size: <@ additionalinput.persistence.size | default("8Gi") @>

                              # https://docs.rocket.chat/installation/hardware-requirements
                              resources:
                                requests:
                                  memory: <@ additionalinput.resources.requests.memory | default("1G") @>
                                  cpu: <@ additionalinput.resources.requests.cpu | default("200m") @>
                                limits:
                                  memory: <@ additionalinput.resources.limits.memory | default("2G") @>
                                  cpu: <@ additionalinput.resources.limits.cpu | default("1") @>

                              securityContext:
                                enabled: <@ additionalinput.securityContext.enabled | default(true) | tojson @>
                                runAsUser: <@ additionalinput.securityContext.runAsUser | default(999) @>
                                fsGroup: <@ additionalinput.securityContext.fsGroup| default(999) @>

                              serviceAccount:
                                # Specifies whether a ServiceAccount should be created
                                create: <@ additionalinput.serviceAccount.create | default(true) | tojson @>

                                # The name of the ServiceAccount to use.
                                # If not set and create is true, a name is generated using the fullname template
                                name: <@ additionalinput.serviceAccount.name | default("") @>

                              service:
                                annotations: <@ additionalinput.service.annotations | default({}) @>
                                labels: <@ additionalinput.service.labels | default({}) @>

                                ## ServiceType
                                ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
                                type: <@ additionalinput.service.type | default("ClusterIP") @>

                                ## Optional static port assignment for service type NodePort.
                                nodePort: <@ additionalinput.service.nodePort | default("") @>
                                port: <@ additionalinput.service.port | default(80) @>

                              ## Optional Pod Labels.
                              podLabels: <@ additionalinput.podLabels | default({}) @>

                              ## Optional Pod Annotations.
                              podAnnotations: <@ additionalinput.podAnnotations | default({}) @>

                              ## Liveness and readiness probe values
                              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
                              ##
                              livenessProbe:
                                enabled: <@ additionalinput.livenessProbe.enabled | default(true) | tojson @>
                                initialDelaySeconds: <@ additionalinput.livenessProbe.initialDelaySeconds | default(30) @>
                                periodSeconds: <@ additionalinput.livenessProbe.periodSeconds | default(5) @>
                                timeoutSeconds: <@ additionalinput.livenessProbe.timeoutSeconds | default(3) @>
                                failureThreshold: <@ additionalinput.livenessProbe.failureThreshold | default(3) @>
                                successThreshold: <@ additionalinput.livenessProbe.successThreshold | default(1) @>

                              readinessProbe:
                                enabled: <@ additionalinput.readinessProbe.enabled | default(true) | tojson @>
                                initialDelaySeconds: <@ additionalinput.readinessProbe.initialDelaySeconds | default(30) @>
                                periodSeconds: <@ additionalinput.readinessProbe.periodSeconds | default(5) @>
                                timeoutSeconds: <@ additionalinput.readinessProbe.timeoutSeconds | default(3) @>
                                failureThreshold: <@ additionalinput.readinessProbe.failureThreshold | default(3) @>
                                successThreshold: <@ additionalinput.readinessProbe.successThreshold | default(1) @>

                            output:
                              goTemplate: |
                                host: "{{ .Values.host }}"
                                version: "{{ .Values.image.tag }}"
                      - name: input-parameters
                        from: "{{inputs.artifacts.additional-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: additionalinput

              - - name: fill-input-in-module-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.fill-default-input.outputs.artifacts.render}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: fill-input-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-input-in-module-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.render-mongodb-connection-url.outputs.artifacts.render}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: mongo

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: rocketchat-config
                      from: additional
                    - name: rocketchat-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-input-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

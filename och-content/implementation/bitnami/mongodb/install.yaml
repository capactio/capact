ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.bitnami.mongodb
  name: install-advanced
  displayName: Install production-ready MongoDB database
  description: Action which installs MongoDB database via Helm chart with production ready parameters
  documentationURL: https://github.com/bitnami/charts
  supportURL: https://bitnami.com
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "4"

  outputTypeInstanceRelations:
    mongodb:
      uses:
        - mongo-helm-release

  implements:
    - path: cap.interface.database.mongodb.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: mongo-install
        templates:
          - name: mongo-install
            inputs:
              artifacts:
                - name: input-parameters
            outputs:
              artifacts:
                - name: mongodb
                  from: "{{steps.helm-install.outputs.artifacts.additional}}"
            steps:
              - - name: create-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "mongodb"
                              repo: "https://charts.bitnami.com/bitnami"
                              version: 10.3.1
                            values:
                              image:
                                registry: <@ image.registry | default('docker.io') @>
                                repository: <@ image.registry | default('bitnami/mongodb') @>
                                tag:  <@ image.registry | default('4.4.2-debian-10-r27') @>
                                pullSecrets: <@ image.registry | default([]) @>
                                pullPolicy: <@ input.image.pullPollicy | default("IfNotPresent") @>

                              architecture: <@ architecture | default('replicaset') @>
                              auth:
                                username: <@ auth.username | default('mongo') @>
                                password: <@ auth.password | default(random_word(length=16)) @>
                                database: <@ auth.database | default('mongo') @>
                                rootPassword: <@ auth.rootPassword | default(random_word(length=16)) @>
                                existingSecret: <@ auth.existingSecret | default('') @>

                              replicaSetName: <@ useStatefulSet | default('rs0') @>
                              replicaSetHostnames: <@ replicaSetHostnames | default(true) @>
                              directoryPerDB: <@ directoryPerDB | default(false) @>
                              systemLogVerbosity: <@ systemLogVerbosity | default(0) @>
                              disableSystemLog: <@ disableSystemLog | default(false) @>
                              disableJavascript: <@ disableJavascript | default(false) @>
                              configuration: <@ configuration | default('') @>
                              existingConfigmap: <@ existingConfigMap | default('') @>
                              initdbScripts: <@ initdbScripts | default({}) @>
                              initdbScriptsConfigMap: <@ initdbScriptsConfigMap | default('') @>

                              extraFlags: <@ extraFlags | default([]) @>
                              extraEnvVars: <@ extraEnvVars | default([]) @>
                              extraEnvVarsCM: <@ extraEnvVarsCM | default('') @>
                              extraEnvVarsSecret: <@ extraEnvVarsSecret | default('') @>

                              tls:
                                enabled: <@ tls.enabled | default(false) @>
                                caCert: "<@ tls.caCert | default('') @>"
                                caKey: "<@ tls.caKey | default('') @>"

                              replicaCount: <@ replicaCount | default(3) @>
                              labels: <@ labels | default({}) @>
                              annotations: <@ annotations | default({}) @>
                              podManagementPolicy: <@ podManagementPolicy | default('OrderedReady') @>
                              strategyType: <@ strategyType | default('RollingUpdate') @>
                              podLabels: <@ podLabels | default({}) @>
                              podAnnotations: <@ podAnnotations | default({}) @>
                              priorityClassName: <@ priorityClassName | default('') @>
                              podAffinityPreset: "<@ podAffinityPreset | default('') @>"
                              podAntiAffinityPreset: <@ podAntiAffinityPreset | default('soft') @>
                              nodeAffinityPreset:
                                type: "<@ nodeAffinityPreset.type | default('') @>"
                                key: <@ nodeAffinityPreset.key | default('') @>
                                values: <@ nodeAffinityPreset.values | default([]) @>
                              affinity: <@ affinity | default({}) @>
                              nodeSelector: <@ nodeSelector | default({}) @>
                              tolerations: <@ tolerations | default([]) @>

                              resources:
                                limits:
                                  cpu: <@ resources.limits.cpu | default('1') @>
                                  memory: <@ resources.limits.memory | default('1Gi') @>
                                requests:
                                  cpu: <@ resources.requests.cpu | default('500m') @>
                                  memory: <@ resources.requests.memory | default('1Gi') @>

                              livenessProbe:
                                enabled: <@ livenessProbe.enabled | default(true) @>
                                initialDelaySeconds: <@ livenessProbe.initialDelaySeconds | default(60) @>
                                periodSeconds: <@ livenessProbe.periodSeconds | default(15) @>
                                timeoutSeconds: <@ livenessProbe.timeoutSeconds | default(5) @>
                                failureThreshold: <@ livenessProbe.failureThreshold | default(1) @>
                                successThreshold: <@ livenessProbe.successThreshold | default(1) @>
                              
                              readinessProbe:
                                enabled: <@ livenessProbe.enabled | default(true) @>
                                initialDelaySeconds: <@ livenessProbe.initialDelaySeconds | default(60) @>
                                periodSeconds: <@ livenessProbe.periodSeconds | default(15) @>
                                timeoutSeconds: <@ livenessProbe.timeoutSeconds | default(5) @>
                                failureThreshold: <@ livenessProbe.failureThreshold | default(1) @>
                                successThreshold: <@ livenessProbe.successThreshold | default(1) @>

                              initContainers: <@ initContainers | default({}) @>
                              sidecars: <@ sidecars | default({}) @>
                              extraVolumeMounts: <@ extraVolumeMounts | default([]) @>
                              extraVolumes: <@ extraVolumes | default([]) @>

                              externalAccess:
                                enabled: <@ externalAccess.enabled | default(false) @>
                                autoDiscovery:
                                  enabled: <@ externalAccess.autoDiscovery.enabled | default(false) @>
                                service:
                                  type: <@ externalAccess.service.type | default('LoadBalancer') @>
                                  port: <@ externalAccess.service.port | default(27017) @>
                                  loadBalancerIPs: <@ externalAccess.service.loadBalancerIPs | default([]) @>
                                  loadBalancerSourceRanges: <@ externalAccess.service.loadBalancerSourceRanges | default([]) @>
                                  domain: <@ externalAccess.service.domain | default('') @>
                                  nodePorts: <@ externalAccess.service.nodePorts | default([]) @>
                                  annotations: <@ externalAccess.service.annotations | default({}) @>

                              perisistence:
                                enabled: <@ persistence.enabled | default(true) @>
                                storageClass: <@ persistence.storageClass | default('null') @>
                                accessMode: <@ persistence.accessMode | default('ReadWriteOnce') @>
                                size: <@ persistence.size | default('8Gi') @>

                              volumePermissions:
                                enabled: true

                              pdb:
                                create: <@ pdb.create | default(true) @>
                                minAvailable: <@ pdb.minAvailable | default(1) @>
                                maxUnavailable: <@ pdb.maxUnavailable | default('null') @>

                              arbiter:
                                enabled: <@ arbiter.enabled | default(false) @>
                                resources:
                                  limits:
                                    cpu: <@ arbiter.resources.limits.cpu | default('500m') @>
                                    memory: <@ arbiter.resources.limits.memory | default('1Gi') @>
                                  requests:
                                    cpu: <@ arbiter.resources.requests.cpu | default('100m') @>
                                    memory: <@ arbiter.resources.requests.memory | default('512Mi') @>

                              metrics:
                                # this does not work in chart version 10.3.1
                                enabled: <@ metrics.enabled | default(false) @>

                            output:
                              goTemplate: |
                                replicas:
                                {{- range $i := until (int .Values.replicaCount) }}
                                  - '{{ include "mongodb.fullname" $ }}-{{ $i }}.{{ include "mongodb.fullname" $ }}-headless.{{ $.Release.Namespace }}.svc:{{ $.Values.service.port }}'
                                {{- end }}
                                replicaSetName: '{{ .Values.replicaSetName }}'
                                defaultDBName: '{{ .Values.auth.database }}'
                                rootPassword: '{{ .Values.auth.rootPassword }}'
                                user:
                                  username: '{{ .Values.auth.username }}'
                                  password: '{{ .Values.auth.password }}'
                      - name: configuration
                        raw:
                          data: |

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances: # Defines which artifacts are output TypeInstances
                    - name: mongodb
                      from: additional
                    - name: mongo-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.create-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

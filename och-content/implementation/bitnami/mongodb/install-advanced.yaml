ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.bitnami.mongodb
  name: install-advanced
  displayName: Install production-ready MongoDB database
  description: Action which installs MongoDB database via Helm chart with production ready parameters
  documentationURL: https://github.com/bitnami/charts
  supportURL: https://bitnami.com
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
      url: https://projectvoltron.dev

spec:
  appVersion: "4"

  outputTypeInstanceRelations:
    mongodb:
      uses:
        - mongo-helm-release

  implements:
    - path: cap.interface.helm.bitnami.mongodb.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: mongo-install
        templates:
          - name: mongo-install
            inputs:
              artifacts:
                - name: input-parameters
            outputs:
              artifacts:
                - name: mongodb
                  from: "{{steps.helm-install.outputs.artifacts.additional}}"
            steps:
              - - name: create-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "mongodb"
                              repo: "https://charts.bitnami.com/bitnami"
                              version: 10.3.1
                            values:
                              architecture: replicaset
                              auth:
                                username: <@ user.username | default('mongo') @>
                                password: <@ user.password | default(random_word(length=16)) @>
                                database: <@ defaultDBName | default('mongo') @>
                                rootPassword: <@ rootPassword | default(random_word(length=16)) @>
                              tls:
                                enabled: <@ tls.enabled | default('false') @>
                                caCert: "<@ tls.caCert | default('') @>"
                                caKey: "<@ tls.caKey | default('') @>"
                              replicaCount: <@ replicas | default('3') @>

                              resources:
                                limits:
                                  cpu: <@ resources.limits.cpu | default('1') @>
                                  memory: <@ resources.limits.memory | default('1Gi') @>
                                requests:
                                  cpu: <@ resources.requests.cpu | default('500m') @>
                                  memory: <@ resources.requests.memory | default('1Gi') @>

                              perisistence:
                                enabled: <@ persistence.enabled | default('true') @>
                                storageClass: <@ persistence.storageClass | default('null') @>
                                accessMode: <@ persistence.accessMode | default('ReadWriteOnce') @>
                                size: <@ persistence.size | default('8Gi') @>

                              volumePermissions:
                                enabled: true

                              pdb:
                                create: <@ pdb.create | default('true') @>
                                minAvailable: <@ pdb.minAvailable | default('1') @>
                                maxUnavailable: <@ pdb.maxUnavailable | default('null') @>

                              arbiter:
                                enabled: <@ arbiter.enabled | default('false') @>
                                resources:
                                  limits:
                                    cpu: <@ arbiter.resources.limits.cpu | default('500m') @>
                                    memory: <@ arbiter.resources.limits.memory | default('1Gi') @>
                                  requests:
                                    cpu: <@ arbiter.resources.requests.cpu | default('100m') @>
                                    memory: <@ arbiter.resources.requests.memory | default('512Mi') @>

                            output:
                              goTemplate: |
                                replicas:
                                {{- range $i := until (int .Values.replicaCount) }}
                                  - '{{ include "mongodb.fullname" $ }}-{{ $i }}.{{ include "mongodb.fullname" $ }}-headless.{{ $.Release.Namespace }}.svc:{{ $.Values.service.port }}'
                                {{- end }}
                                replicaSetName: '{{ .Values.replicaSetName }}'
                                defaultDBName: '{{ .Values.auth.database }}'
                                rootPassword: '{{ .Values.auth.rootPassword }}'
                                user:
                                  username: '{{ .Values.auth.username }}'
                                  password: '{{ .Values.auth.password }}'
                      - name: configuration
                        raw:
                          data: |

              - - name: helm-install
                  voltron-action: helm.install
                  voltron-outputTypeInstances: # Defines which artifacts are output TypeInstances
                    - name: mongodb
                      from: additional
                    - name: mongo-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.create-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

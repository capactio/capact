ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.capactio.capact
  name: upgrade
  displayName: "Upgrade Capact"
  description: "Upgrade Capact Kubernetes installation"
  documentationURL: https://capactio.dev
  supportURL: https://capactio.dev
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.dev
      name: Capact Dev Team
      url: https://capactio.dev

spec:
  appVersion: "0.3.x"

  outputTypeInstanceRelations: { } # no new TypeInstances to upload, they are updated in place

  implements:
    - path: cap.interface.capactio.capact.upgrade
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: upgrade
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: capact-upgrade
        templates:
          - name: capact-upgrade
            inputs:
              artifacts:
                - name: input-parameters
                - name: capact-config
                - name: capact-helm-release
                - name: argo-helm-release
                - name: ingress-nginx-helm-release
                - name: kubed-helm-release
                - name: monitoring-helm-release
                - name: neo4j-helm-release
            steps:
              - - name: apply-crds
                  template: apply-capact-crd
                  arguments:
                    parameters:
                     - name: crdURL
                       value: https://storage.googleapis.com/capactio-master-charts/crds/core.projectvoltron.dev_actions.yaml

                - name: gen-global-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            reuseValues: true
                            chart:
                              version: "<@ version @>"
                              <% if override.helmRepoURL %>
                              repo: "<@ override.helmRepoURL @>"
                              <% endif %>
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: ""

                - name: gen-neo4j-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            reuseValues: true
                            chart:
                              version: "<@ version @>"
                              <% if override.helmRepoURL %>
                              repo: "<@ override.helmRepoURL @>"
                              <% endif %>
                            <% if increaseResourceLimits %>
                            values:
                              neo4j:
                                core:
                                  standalone: true
                                  resources:
                                    requests:
                                      cpu: 500m
                                      memory: 1768Mi
                                    limits:
                                      cpu: 1
                                      memory: 3072Mi
                            <% endif %>

                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: ""
                - name: gen-capact-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            reuseValues: true
                            chart:
                              version: "<@ version @>"
                              <% if override.helmRepoURL %>
                              repo: "<@ override.helmRepoURL @>"
                              <% endif %>
                            values:
                              global:
                                containerRegistry:
                                  path: <@ override.docker.repository @>
                                  overrideTag: <@ override.docker.tag @>

                            <% if increaseResourceLimits %>
                              gateway:
                                resources:
                                  limits:
                                    cpu: 300m
                                    memory: 128Mi
                                  requests:
                                    cpu: 100m
                                    memory: 48Mi

                              och-public:
                                resources:
                                  limits:
                                    cpu: 400m
                                    memory: 512Mi
                                  requests:
                                    cpu: 200m
                                    memory: 128Mi
                            <% endif %>
                            output:
                              goTemplate:
                                gateway:
                                  url: "https://{{ .Values.gateway.ingress.host}}.{{ .Values.global.domainName }}"
                                  username: "{{ .Values.global.gateway.auth.username}}"
                                  password: "{{ .Values.global.gateway.auth.password }}"
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: ""

              - - name: neo4j-upgrade
                  voltron-action: helm.upgrade
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-neo4j-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.neo4j-helm-release}}"
              - - name: waiting-for-neo4j-to-be-ready
                  template: wait-for-ready-pod
                  arguments:
                    parameters:
                      - name: namespace
                        value: 'neo4j'
                      - name: selector
                        value: 'app.kubernetes.io/component=core'
                      - name: timeout
                        value: '300s'

              - - name: ingress-upgrade
                  voltron-action: helm.upgrade
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-global-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.ingress-nginx-helm-release}}"
              - - name: waiting-for-ingress-to-be-ready
                  template: wait-for-ready-pod
                  arguments:
                    parameters:
                      - name: namespace
                        value: 'ingress-nginx'
                      - name: selector
                        value: 'app.kubernetes.io/component=controller'
                      - name: timeout
                        value: '90s'

              - - name: argo-upgrade
                  voltron-action: helm.upgrade
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-global-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.argo-helm-release}}"

              - - name: kubed-upgrade
                  voltron-action: helm.upgrade
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-global-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.kubed-helm-release}}"
              - - name: synchronize-minio-secret
                  template: synchronize-minio-secret

              - - name: monitoring-upgrade
                  voltron-action: helm.upgrade
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-global-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.monitoring-helm-release}}"

              - - name: capact-upgrade
                  voltron-action: helm.upgrade
                  voltron-updateTypeInstances:
                    - name: capact-config
                      from: additional
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.gen-capact-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      - name: helm-release
                        from: "{{inputs.artifacts.capact-helm-release}}"

          - name: apply-capact-crd
            inputs:
              parameters:
                - name: crdURL
            container:
              image: bitnami/kubectl:1.18
              command: [ kubectl ]
              args: [ "apply", "-f={{inputs.parameters.crdURL}}"]
          - name: synchronize-minio-secret
            container:
              image: bitnami/kubectl:1.18
              command: [ kubectl ]
              args: [ "annotate", "secret", "-n=argo", "argo-minio", 'kubed.appscode.com/sync=', "--overwrite" ]
          - name: wait-for-ready-pod
            inputs:
              parameters:
                - name: namespace
                - name: selector
                - name: timeout
            container:
              image: bitnami/kubectl:1.18
              command: [ kubectl ]
              args:
                - "wait"
                - "--for=condition=ready"
                - "pod"
                - "-n={{inputs.parameters.namespace}}"
                - "--selector={{inputs.parameters.selector}}"
                - "--timeout={{inputs.parameters.timeout}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

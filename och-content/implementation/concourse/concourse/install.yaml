ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.concourse.concourse
  name: install
  displayName: Install Concourse
  description: Action which installs Concourse via Helm chart
  documentationURL: https://concourse-ci.org/
  supportURL: https://concourse-ci.org/
  iconURL: https://concourse-ci.org/images/logo-white.svg
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
      url: https://projectvoltron.dev

spec:
  appVersion: "8.x.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
    concourse-config:
      uses:
        - concourse-helm-release
        - postgresql
        - database
        - user

  implements:
    - path: cap.interface.automation.concourse.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-user
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: concourse-install
        templates:
          - name: concourse-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: postgresql
                  optional: true
            steps:
              - - name: install-db
                  voltron-when: postgresql == nil # conditional execution
                  voltron-action: postgresql.install
                  voltron-outputTypeInstances:
                    - name: postgresql
                      from: postgresql
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                            defaultDBName: postgres

              - - name: create-user
                  voltron-action: postgresql.create-user
                  voltron-outputTypeInstances:
                    - name: user
                      from: user
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: user-input
                        raw:
                          data: |
                            name: concourse

              - - name: render-create-db-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            name: concoursedb
                            owner: "<@ name @>"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |

              - - name: create-db
                  voltron-action: postgresql.create-db
                  voltron-outputTypeInstances:
                    - name: database
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        from: "{{steps.render-create-db-args.outputs.artifacts.render}}"

              - - name: render-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            command: "install"
                            generateName: true
                            chart:
                              name: "concourse"
                              repo: "https://concourse-charts.storage.googleapis.com"
                              version: "14.6.2"
                            output:
                              goTemplate:
                                version: "{{ .Values.imageTag }}"
                                host: "{{ (index .Values.web.ingress.hosts 0) }}"
                                userAndPassword: "{{ .Values.secrets.localUsers }}"
                            values:
                              postgresql:
                                enabled: false
                              rbac:
                                create: false
                              secrets:
                                postgresUser: <@ user.name @>
                                postgresPassword: <@ user.password @>
                              concourse:
                                web:
                                  externalUrl: https://<@ input.host @>
                                  kubernetes:
                                    createTeamNamespaces: false
                                  postgres:
                                    host: <@ db.host @>
                                    database: <@ database.name @>
                              web:
                                ingress:
                                  enabled: true
                                  annotations:
                                    acmechallengetype: http01
                                    cert-manager.io/cluster-issuer: letsencrypt
                                    kubernetes.io/ingress.class: nginx
                                    kubernetes.io/tls-acme: "true"
                                    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                                  tls:
                                    - secretName: concourse-server-tls-<@ random_word(length=5) @>
                                      hosts:
                                        - <@ input.host @>
                                  hosts:
                                  - <@ input.host @>
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: "prefix: db"

              - - name: fill-database-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"
                      - name: configuration
                        raw:
                          data: "prefix: database"

              - - name: fill-input-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-database-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: fill-user-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-input-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: "prefix: user"

              - - name: helm-run
                  voltron-action: helm.run
                  voltron-outputTypeInstances:
                    - name: concourse-config
                      from: additional
                    - name: concourse-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-user-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

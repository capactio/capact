ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.atlassian.confluence
  name: install
  displayName: Install Confluence
  description: Action which installs Confluence via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/confluence-server
  supportURL: https://mox.sh/helm/
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
      url: https://projectvoltron.dev

spec:
  appVersion: "2.x.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: [ "get" ]

  additionalOutput:
    typeInstances:
      confluence-helm-release:
        typeRef:
          path: cap.type.helm.chart.release
          revision: 0.1.0
    typeInstanceRelations:
      confluence-config:
        uses:
          - confluence-helm-release
          - postgresql
          - database

  implements:
    - path: cap.interface.productivity.confluence.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      appVersion: 3.x.x
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: main
        templates:
          - name: main
            inputs:
              artifacts:
                - name: input-parameters
            steps:
              - - name: install-db
                  voltron-when: postgresql == nil # conditional execution
                  arguments:
                    # TODO: password should be generated or populated by user
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                              password: okon
                            defaultDBName: postgres
                  voltron-action: postgresql.install

              - - name: create-db
                  voltron-action: postgresql.create-db
                  voltron-outputTypeInstances:
                    - name: database
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{workflow.outputs.artifacts.postgresql}}"
                      - name: database-input
                        raw:
                          data: |
                            name: confluencedb 
                            owner: superuser

              - - name: render-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          # TODO: context should be removed
                          # TODO: `args.output` should be simplified.
                          data: |
                            context:
                              name: "confluence-helm-release"
                              dryRun: false
                              timeout: "10m"
                              platform:
                                namespace: "default"
                            args:
                              command: "install"
                              generateName: true
                              chart:
                                name: "confluence-server"
                                repo: "https://helm.mox.sh"
                              output:{% raw %}
                                goTemplate:
                                  version: {{ '"{{ .Values.image.tag }}"' }}
                                  host: {{ "'{{ template \"confluence-server.fullname\" . }}'" }}{% endraw %}
                              values:
                                postgresql:
                                  enabled: false
                                databaseConnection:
                                  host: "{{ host }}"
                                  user: "{{ superuser.username }}"
                                  password: "{{ superuser.password }}"
                                  {% raw %}database: "{{ name }}"{% endraw %}
                                ingress:
                                  enabled: true
                                  hosts:
                                  - host: confluence.voltron.local
                                    paths: ['/']
                      - name: input-parameters
                        from: "{{workflow.outputs.artifacts.postgresql}}"

              - - name: fill-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"

              - - name: helm-run
                  voltron-action: helm.run
                  voltron-outputTypeInstances:
                    - name: confluence-config
                      from: additional
                    - name: confluence-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-params-in-helm-args.outputs.artifacts.render}}"

          - name: create-psql-db
            inputs:
              artifacts:
                - name: script
                  path: /script.sh
            container:
              image: postgres:11
              command: [bash]
              args: ["/script.sh"]
            outputs:
              artifacts:
                - name: database
                  path: /database.yml

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

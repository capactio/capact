ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.atlassian.confluence
  name: install
  displayName: Install Confluence
  description: Action which installs Confluence via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/confluence-server
  supportURL: https://mox.sh/helm/
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
      url: https://projectvoltron.dev

spec:
  appVersion: "2.x.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
      confluence-config:
        uses:
          - confluence-helm-release
          - postgresql
          - database

  implements:
    - path: cap.interface.productivity.confluence.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: main
        templates:
          - name: main
            # Voltron Engine will inject the 'input-parameters' artifacts into the workflow entrypoint.
            # It contains the Interface parameters, in our case it is `confluence.install-input`.
            inputs:
              artifacts:
                - name: input-parameters
                - name: postgresql
                  optional: true
            steps:
              # If the postgresql TypeInstance was not provided, then create it
              # using the imported 'postgresql.install' Interface.
              - - name: install-db
                  voltron-action: postgresql.install
                  voltron-when: postgresql == nil
                  voltron-outputTypeInstances:
                    - name: postgresql
                      from: postgresql
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                              password: okon
                            defaultDBName: postgres

              - - name: render-create-db-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            name: confluencedb
                            owner: "<@ superuser.username @>"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: |

              # Create the database for Confluence in our PostgreSQL instance
              # using the imported 'postgresql.create-db' Interface
              - - name: create-db
                  voltron-action: postgresql.create-db
                  voltron-outputTypeInstances:
                    - name: database                  # Defining the output TypeInstance 'database'
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        from: "{{steps.render-create-db-args.outputs.artifacts.render}}"

              # Here we prepare the input for the Helm runner. In the next two steps,
              # we use Jinja2 to render the input and fill the required parameters.
              # In the future there might be better way to do this.
              - - name: render-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            command: "install"
                            generateName: true
                            chart:
                              name: "confluence-server"
                              repo: "https://helm.mox.sh"
                              version: "0.2.5"
                            output:
                              goTemplate:
                                version: "{{ .Values.image.tag }}"
                                host: "{{ (index .Values.ingress.hosts 0).host }}"
                            values:
                              image:
                                tag: "7.4.4"
                              postgresql:
                                enabled: false
                              databaseConnection:
                                host: "<@ host @>"
                                user: "<@ superuser.username @>"
                                password: "<@ superuser.password | default(random_word()) @>"
                                database: "<@ name @>"
                              ingress:
                                enabled: true
                                annotations:
                                  acmechallengetype: http01
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/ingress.class: nginx
                                  kubernetes.io/tls-acme: "true"
                                tls:
                                  - secretName: confluence-server-tls-<@ random_word(length=5) @>
                                    hosts:
                                      - <@ input.host @>
                                hosts:
                                - host: <@ input.host @>
                                  paths: ['/']
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: ""

              - - name: fill-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"
                      - name: configuration
                        raw:
                          data: ""

              - - name: fill-input-params-in-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              # Execute the Helm runner, with the input parameters created in the previous step.
              # This will create the Helm chart and deploy our Confluence instance
              - - name: helm-run
                  voltron-action: helm.run
                  voltron-outputTypeInstances:
                    - name: confluence-config         # Defining the output TypeInstance 'confluence-config'
                      from: additional
                    - name: confluence-helm-release   # Defining the output TypeInstance 'confluence-helm-release'
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-input-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.atlassian.crowd
  name: install
  displayName: Install Atlassian Crowd
  description: Action which installs Atlassian Crowd via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/crowd
  supportURL: https://mox.sh/helm/
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "4.x.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
    crowd-config:
      uses:
        - crowd-helm-release
        - postgresql
        - database
        - user

  implements:
    - path: cap.interface.productivity.crowd.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
        - name: create-user
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: crowd-install
        templates:
          - name: crowd-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: postgresql
                  optional: true
            steps:
              - - name: install-db
                  capact-when: postgresql == nil # conditional execution
                  capact-action: postgresql.install
                  capact-outputTypeInstances:
                    - name: postgresql
                      from: postgresql
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                            defaultDBName: postgres

              - - name: create-user
                  capact-action: postgresql.create-user
                  capact-outputTypeInstances:
                    - name: user
                      from: user
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: user-input
                        raw:
                          data: |
                            name: crowd

              - - name: render-create-db-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            name: crowd
                            owner: "<@ name @>"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |

              - - name: create-db
                  capact-action: postgresql.create-db
                  capact-outputTypeInstances:
                    - name: database
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        from: "{{steps.render-create-db-args.outputs.artifacts.render}}"

              - - name: render-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "crowd"
                              repo: "https://helm.mox.sh"
                              version: "2.0.5"
                            output:
                              goTemplate: |
                                version: "{{ .Values.image.tag }}"
                                host: "{{ (index .Values.ingress.hosts 0).host }}"
                            values:
                              postgresql:
                                enabled: false
                              databaseConnection:
                                host: <@ postgres.host @>
                                user: <@ user.name @>
                                password: <@ user.password @>
                                database: <@ db.name @>
                              ingress:
                                enabled: <@ input.ingress.enabled | default(true | tojson) @>
                                annotations:
                                  acmechallengetype: http01
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/ingress.class: nginx
                                  kubernetes.io/tls-acme: "true"
                                  nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                                  nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                                  nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
                                  nginx.ingress.kubernetes.io/affinity: "cookie"
                                tls:
                                  - secretName: crowd-server-tls-<@ random_word(length=5) @>
                                    hosts:
                                      - <@ input.ingress.host @>
                                hosts:
                                - host: <@ input.ingress.host @>
                                  paths: ['/']

                              image:
                                repository: <@ input.image.repository | default("atlassian/crowd") @>
                                tag: <@ input.image.tag | default("4.3.0") @>
                                pullPolicy: <@ input.image.pullPolicy | default("IfNotPresent") @>
                                pullSecrets: <@ input.image.pullSecrets | default({}) @>

                              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                              serviceAccount:
                                create: <@ input.serviceAccount.create | default(true | tojson) @> # modified
                                annotations: <@ input.serviceAccount.annotations | default({}) @>
                                name: <@ input.serviceAccount.name | default("") @>

                              ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#podsecuritycontext-v1-core
                              podSecurityContext:
                                fsGroup: <@ input.podSecurityContext.fsGroup | default(2004) @>

                              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                              securityContext:
                                readOnlyRootFilesystem: <@ input.securityContext.readOnlyRootFilesystem | default(false | tojson) @>
                                runAsNonRoot: <@ input.securityContext.runAsNonRoot | default(false | tojson) @>
                                runAsUser: <@ input.securityContext.runAsUser | default(0) @>

                              ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
                              service:
                                type: <@ input.service.type | default("ClusterIP") @>
                                ## The port for Tomcat/Crowd to listen on
                                port: <@ input.service.port | default(8095) @>
                                ## HTTPS Port, in case ATL_TOMCAT_SCHEME is set to 'https'
                                httpsPort: <@ input.service.httpsPort | default(None | tojson) @>
                                loadBalancerIP: <@ input.service.loadBalancerIP | default(None | tojson) @>
                                ## Use nodePorts to requets some specific ports when usin NodePort
                                ## nodePorts:
                                ##   http: <to set explicitly, choose port between 30000-32767>
                                ##   https: <to set explicitly, choose port between 30000-32767>
                                ##
                                nodePorts:
                                  http: <@ input.service.nodePorts.http | default(None | tojson) @>
                                  https: <@ input.service.nodePorts.https | default(None | tojson) @>

                              ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
                              resources:
                                requests:
                                  memory: <@ input.resources.requests.memory | default("1G") @>
                                  cpu: <@ input.resources.requests.cpu | default("500m") @>
                                limits:
                                  memory: <@ input.resources.limits.memory | default("2G") @>
                                  cpu: <@ input.resources.limits.cpu | default("1") @>

                              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
                              replicaCount: <@ input.replicaCount | default(1) @>

                              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
                              nodeSelector: <@ input.nodeSelector | default({}) @>

                              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                              tolerations: <@ input.tolerations | default([]) @>
                              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                              affinity: <@ input.affinity | default({}) @>
                              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
                              podAnnotations: <@ input.podAnnotations | default({}) @>

                              ## Persistent Volume Claim
                              ## Crowd Home directory
                              ## https://kubernetes.io/docs/concepts/storage/persistent-volumes/
                              persistence:
                                enabled: <@ input.persistence.enabled | default(true | tojson) @>
                                annotations: <@ input.persistence.annotations | default({}) @>
                                ## existingClaim needs the existing PVC name
                                existingClaim: <@ input.persistence.existingClaim | default("") @>
                                accessMode: <@ input.persistence.accessMode | default("ReadWriteOnce") @>
                                size: <@ input.persistence.size | default("10Gi") @>

                                # If defined, storageClassName: <storageClass>
                                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                                ## If undefined (the default) or set to nil, no storageClassName spec is
                                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                                ##   GKE, AWS & OpenStack)
                                ##
                                storageClass: <@ input.persistence.storageClass | default(None | tojson) @>

                              # Additional volume mounts
                              extraVolumeMounts: <@ input.extraVolumeMounts | default([]) @>

                              # Additional volumes
                              extraVolumes: <@ input.extraVolumes | default([]) @>

                              ## Use an alternate scheduler, e.g. "stork".
                              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                              schedulerName: <@ input.schedulerName | default("") @>

                              ## Container Probes
                              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
                              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
                              <% set readinessProbeEnabled = input.readinessProbe.enabled | default(true) %>
                              <% if readinessProbeEnabled -%>
                              readinessProbe:
                                httpGet:
                                  path: /crowd/status
                                  port: http
                                initialDelaySeconds: <@ input.readinessProbe.initialDelaySeconds | default(120) @>
                                periodSeconds: <@ input.readinessProbe.periodSeconds | default(30) @>
                                timeoutSeconds: <@ input.readinessProbe.timeoutSeconds | default(10) @>
                                failureThreshold: <@ input.readinessProbe.failureThreshold | default(6) @>
                                successThreshold: <@ input.readinessProbe.successThreshold | default(1) @>
                              <%- endif %>

                              <% set livenessProbeEnabled = input.livenessProbe.enabled | default(true) %>
                              <% if livenessProbeEnabled -%>
                              livenessProbe:
                                httpGet:
                                  path: /crowd/status
                                  port: http
                                initialDelaySeconds: <@ input.livenessProbe.initialDelaySeconds | default(120) @>
                                periodSeconds: <@ input.livenessProbe.periodSeconds | default(30) @>
                                timeoutSeconds: <@ input.livenessProbe.timeoutSeconds | default(10) @>
                                failureThreshold: <@ input.livenessProbe.failureThreshold | default(6) @>
                                successThreshold: <@ input.livenessProbe.successThreshold | default(1) @>
                              <%- endif %>

                              ## Crowd specific configurations
                              ## https://hub.docker.com/r/atlassian/crowd
                              ## crowd/secrets/cas
                              caCerts: <@ input.caCerts | default({}) @>

                              initContainerImages:
                                # used keytool if 'caCerts' is enabled
                                jdk: <@ input.initContainerImages.jdk | default("adoptopenjdk:11-jdk-hotspot") @>

                              ## Environment Variables that will be injected in the ConfigMap
                              ## Default values unless otherwise stated
                              envVars:
                                ## Memory / Heap Size (JVM_MINIMUM_MEMORY) Mandatory, see @Notes above
                                JVM_MINIMUM_MEMORY: <@ input.jvmMinimumMemory | default("1024m") @>
                                ## Memory / Heap Size (JVM_MAXIMUM_MEMORY) Mandatory, see @Notes above
                                JVM_MAXIMUM_MEMORY: <@ input.jvmMaximumMemory | default("1024m") @>
                                <% if input.envVars -%>
                                <% for key, value in input.envVars.items() %>
                                <@ key @>: <@ value|string @>
                                <%- endfor %>
                                <%- endif %>

                              ## Additional container environment variables
                              extraEnv: <@ input.extraEnv | default("-XX:MaxMetaspaceSize=512m") @>
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: fill-postgresql-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: postgres

              - - name: fill-db-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-postgresql-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: db

              - - name: fill-user-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-db-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: user

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: crowd-config
                      from: additional
                    - name: crowd-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-user-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

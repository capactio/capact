ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.atlassian.jira
  name: install
  displayName: Install Jira
  description: Action which installs Jira via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/jira-software
  supportURL: https://mox.sh/helm/
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "8.x.x"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
    jira-config:
      uses:
        - jira-helm-release
        - postgresql
        - database
        - user

  implements:
    - path: cap.interface.productivity.jira.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-user
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: jira-install
        templates:
          - name: jira-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: postgresql
                  optional: true
            steps:
              - - name: install-db
                  capact-when: postgresql == nil # conditional execution
                  capact-action: postgresql.install
                  capact-outputTypeInstances:
                    - name: postgresql
                      from: postgresql
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                            defaultDBName: postgres

              - - name: create-user
                  capact-action: postgresql.create-user
                  capact-outputTypeInstances:
                    - name: user
                      from: user
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: user-input
                        raw:
                          data: |
                            name: jira

              - - name: render-create-db-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            name: jiradb
                            owner: "<@ name @>"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |

              - - name: create-db
                  capact-action: postgresql.create-db
                  capact-outputTypeInstances:
                    - name: database
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        from: "{{steps.render-create-db-args.outputs.artifacts.render}}"

              - - name: render-secret-manifest
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              generateName: jira-database-basic-auth-
                            type: kubernetes.io/basic-auth
                            stringData:
                              username: <@ user.name @>
                              password: <@ user.password @>
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: "prefix: user"

              - - name: create-basic-auth-secret
                  template: kubectl-create
                  arguments:
                    artifacts:
                      - name: manifest
                        from: "{{steps.render-secret-manifest.outputs.artifacts.render}}"

              - - name: create-license-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            <% if input.jira.licenseKeyInBase64 %>
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              generateName: jira-license-
                            data:
                              license-key: <@ input.jira.licenseKeyInBase64 @>
                            <% endif %>
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: create-license-secret
                  template: kubectl-create
                  arguments:
                    artifacts:
                      - name: manifest
                        from: "{{steps.create-license-args.outputs.artifacts.render}}"

              - - name: fill-input-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "jira"
                              repo: "https://atlassian-labs.github.io/data-center-helm-charts"
                            output:
                              goTemplate: |
                                version: "{{ .Values.image.tag }}"
                                host: "{{ .Values.ingress.host }}"
                            values:
                              replicaCount: <@ input.replicaCount | default(1) @>
                              image:
                                repository: <@ input.image.repository | default("atlassian/jira-software") @>
                                pullPolicy: <@ input.image.pullPolicy | default("IfNotPresent") @>
                                tag: <@ input.image.tag | default("8.16.1") @>
                              serviceAccount:
                                name: <@ input.serviceAccount.name | default("") @>
                                create: <@ input.serviceAccount.create | default(True) @>
                                imagePullSecrets: <@ input.serviceAccount.imagePullSecrets | default([]) @>
                              database:
                                type: postgres72
                                url: jdbc:postgresql://<@ db.host @>:<@ db.port @>/<@ database.name @>
                                driver: <@ input.database.driver | default("org.postgresql.Driver") @>
                                credentials:
                                  secretName: <@ secret.metadata.name @>
                                  usernameSecretKey: username
                                  passwordSecretKey: password
                              jira:
                                service:
                                  port: <@ input.jira.service.port | default(80) @>
                                  type: <@ input.jira.service.type | default("ClusterIP") @>
                                  contextPath: <@ input.jira.service.contextPath | default("") @>
                                securityContext:
                                  enabled: <@ input.jira.securityContext.enabled | default(True) @>
                                  gid: <@ input.jira.securityContext.gid | default("2001") @>
                                ports:
                                  http: <@ input.jira.ports.http | default(8080) @>
                                readinessProbe:
                                  initialDelaySeconds: <@ input.jira.readinessProbe.initialDelaySeconds | default(10) @>
                                  periodSeconds: <@ input.jira.readinessProbe.periodSeconds | default(5) @>
                                  failureThreshold: <@ input.jira.readinessProbe.failureThreshold | default(30) @>
                                accessLog:
                                  mountPath: <@ input.jira.accessLog.mountPath | default("/opt/atlassian/jira/logs") @>
                                  localHomeSubPath: <@ input.jira.accessLog.localHomeSubPath | default("log") @>
                                clustering:
                                  enabled: <@ input.jira.clustering.enabled | default(True) @>
                                license:
                                  secretName: <@ optionalLicense.metadata.name @>
                                  secretKey: license-key
                                resources:
                                  jvm:
                                    maxHeap: <@ input.jira.resources.jvm.maxHeap | default("1g") @>
                                    minHeap: <@ input.jira.resources.jvm.minHeap | default("1g") @>
                                    reservedCodeCache: <@ input.jira.resources.jvm.reservedCodeCache | default("512m") @>
                                  <% if input.bitbucket.resources.container %>
                                  container: <@ input.bitbucket.resources.container @>
                                  <% else %>
                                  container:
                                    limits:
                                      cpu: "4"
                                      memory: "2G"
                                    requests:
                                      cpu: "1"
                                      memory: "2G"
                                  <% endif %>
                                additionalJvmArgs: <@ input.jira.additionalJvmArgs | default([]) @>
                                additionalLibraries: <@ input.jira.additionalLibraries | default([]) @>
                                additionalBundledPlugins: <@ input.jira.additionalBundledPlugins | default([]) @>
                                additionalVolumeMounts: <@ input.jira.additionalVolumeMounts | default([]) @>
                                additionalEnvironmentVariables: <@ input.jira.additionalEnvironmentVariables | default([]) @>
                              ingress:
                                create: <@ input.ingress.create | default(True) @>
                                nginx: <@ input.ingress.nginx | default(True) @>
                                host: <@ input.ingress.host @>
                                annotations:
                                  cert-manager.io/cluster-issuer: "letsencrypt"
                                  kubernetes.io/tls-acme: "true"
                                  nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                                https: <@ input.ingress.https | default(True) @>
                                tlsSecretName: <@ input.ingress.tlsSecretName | default("jira-server-tls-" + random_word(length=5)) @>
                              fluentd:
                                enabled: <@ input.fluentd.enabled | default(False) @>
                                imageName: <@ input.fluentd.imageName | default("fluent/fluentd-kubernetes-daemonset:v1.11.5-debian-elasticsearch7-1.2") @>
                                httpPort: <@ input.fluentd.httpPort | default(9880) @>
                                elasticsearch:
                                  enabled: <@ input.fluentd.elasticsearch.enabled | default(False) @>
                                  hostname: <@ input.fluentd.elasticsearch.hostname | default("elasticsearch") @>
                                  indexNamePrefix: <@ input.fluentd.elasticsearch.indexNamePrefix | default("jira") @>
                              podAnnotations: <@ input.podAnnotations | default({}) @>
                              volumes:
                                localHome:
                                  persistentVolumeClaim:
                                    create: <@ input.volumes.localHome.persistentVolumeClaim.create | default(True) @>
                                    storageClassName: <@ input.volumes.localHome.persistentVolumeClaim.storageClassName | default("") @>
                                    resources:
                                      requests:
                                        storage: <@ input.volumes.localHome.persistentVolumeClaim.resources.requests.storage | default("1Gi") @>
                                  customVolume: <@ input.volumes.localHome.customVolume | default({}) @>
                                  mountPath: <@ input.volumes.localHome.mountPath | default("/var/atlassian/application-data/jira") @>
                                sharedHome:
                                  persistentVolumeClaim:
                                    create: <@ input.volumes.sharedHome.persistentVolumeClaim.create | default(True) @>
                                    storageClassName: <@ input.volumes.sharedHome.persistentVolumeClaim.storageClassName | default("nfs") @>
                                    resources:
                                      requests:
                                        storage: <@ input.volumes.sharedHome.persistentVolumeClaim.resources.requests.storage | default("1Gi") @>
                                  customVolume: <@ input.volumes.sharedHome.customVolume | default({}) @>
                                  mountPath: <@ input.volumes.sharedHome.mountPath | default("/var/atlassian/application-data/shared-home") @>
                                  subPath: <@ input.volumes.sharedHome.subPath | default("") @>
                                  nfsPermissionFixer:
                                    enabled: <@ input.volumes.sharedHome.nfsPermissionFixer.enabled | default(False) @>
                                    mountPath: <@ input.volumes.sharedHome.nfsPermissionFixer.mountPath | default("/shared-home") @>
                                    command: <@ input.volumes.sharedHome.nfsPermissionFixer.command | default("") @>
                                additional: <@ input.volumes.additional | default([]) @>
                              nodeSelector: <@ input.nodeSelector | default({}) @>
                              tolerations: <@ input.tolerations | default([]) @>
                              affinity: <@ input.affinity | default({}) @>
                              additionalContainers: <@ input.additionalContainers | default([]) @>
                              additionalInitContainers: <@ input.additionalInitContainers | default([]) @>
                              additionalLabels: <@ input.additionalLabels | default({}) @>
                              additionalFiles: <@ input.additionalFiles | default([]) @>

                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: fill-database-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-input-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"
                      - name: configuration
                        raw:
                          data: "prefix: database"

              - - name: fill-db-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-database-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: "prefix: db"

              - - name: fill-secret-name-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-db-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-basic-auth-secret.outputs.artifacts.manifest}}"
                      - name: configuration
                        raw:
                          data: "prefix: secret"

              - - name: fill-license-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-secret-name-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-license-secret.outputs.artifacts.manifest}}"
                      - name: configuration
                        raw:
                          data: "prefix: optionalLicense"

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: jira-config
                      from: additional
                    - name: jira-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-license-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

          # You can always run custom images, we use the kubectl image to create a K8s resources
          # it will use the same serviceAccount as `helm install`
          - name: kubectl-create
            inputs:
              artifacts:
                - name: manifest
                  path: "/in/manifest.yaml"
            outputs:
              artifacts:
                - name: manifest
                  path: "/tmp/manifest.yaml"
            script:
              image: bitnami/kubectl:1.18
              command: [ bash ]
              source: |
                # Checking if manifest is not empty
                if grep -q '[^[:space:]]' "{{inputs.artifacts.manifest.path}}"; then
                echo "Creating Kubernetes resource..."
                kubectl create -f {{inputs.artifacts.manifest.path}} --output=yaml > {{outputs.artifacts.manifest.path}}
                else
                echo "Creating empty data as the input manifest is empty..."
                cat > "{{outputs.artifacts.manifest.path}}" <<-'EOF'
                metadata:
                  name: ""
                EOF
                fi
                # Known bug with PNS executor, which doesn't work when pod exists too early.
                sleep 1

signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

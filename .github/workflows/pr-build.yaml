name: PR build

on:
  pull_request_target:
    types: [ opened, synchronize, reopened ]
    paths:
      - "**.go"
      - "**.py"
      - "go.mod"
      - "go.sum"
      - "**.graphql"
      - ".github/workflows/**"
      - "**.sh"
      - "Makefile"
      - "deploy/**"
      - "hub-js/**"
      - "Dockerfile"
      - "!**.md"
      - ".goreleaser.latest.yml"
      - "**.yaml.tmpl"
    branches:
      - "main"

jobs:
  cancel-previous-workflows:
    name: Cancel previous workflows
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    # https://github.com/styfle/cancel-workflow-action#advanced-token-permissions
    permissions:
      actions: write

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  entry-tests:
    name: Lint and test code
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run linting
        run: |
          make test-lint
      - name: Run unit tests
        run: make test-unit
      - name: Check generated files
        run: |
          make test-generated

  python-tests:
    name: Lint and test python code
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hack/images/jinja2/jinja2-cli
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --exit-zero --max-line-length=127 --statistics
        continue-on-error: true
      - name: Test with pytest
        run: |
          pip install pytest
          pytest .

  documentation-sanity:
    name: Check documentation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Run LanguageTool
        uses: reviewdog/action-languagetool@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          level: info
          custom_api_endpoint: ''
          ### Flags for LanguageTool ###
          # Ref: https://languagetool.org/http-api/swagger-ui/#!/default/post_check
          language: 'en-US'
          enabled_rules: ''
          disabled_rules: 'WHITESPACE_RULE,EN_QUOTES,DASH_RULE,WORD_CONTAINS_UNDERSCORE,UPPERCASE_SENTENCE_START,ARROWS,COMMA_PARENTHESIS_WHITESPACE,UNLIKELY_OPENING_PUNCTUATION,SENTENCE_WHITESPACE,CURRENCY,EN_UNPAIRED_BRACKETS,PHRASE_REPETITION,PUNCTUATION_PARAGRAPH_END,METRIC_UNITS_EN_US,ENGLISH_WORD_REPEAT_BEGINNING_RULE,DOUBLE_PUNCTUATION'
          enabled_categories: ''
          disabled_categories: 'TYPOS,TYPOGRAPHY,CASING'
          enabled_only: 'false'
      - name: Run misspell check
        uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          level: info
          locale: "US"
          exclude: |
            ./hub-js/package-lock.json
            ./hub-js/package.json
            ./go.mod
            ./go.sum
      - name: Check links in *.md files
        if: always() # validate also *.md even if errors found in mdx files.
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          file-extension: '.md'
          check-modified-files-only: 'yes'
          config-file: '.mlc.config.json'
          folder-path: '.'
          base-branch: 'main'

  prepare-matrix:
    name: Prepare components build matrix
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      matrix-app: ${{ steps.set-matrix-app.outputs.matrix }}
      matrix-test: ${{ steps.set-matrix-test.outputs.matrix }}
      matrix-infra: ${{ steps.set-matrix-infra.outputs.matrix }}
      matrix-tool: ${{ steps.set-matrix-tool.outputs.matrix }}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: setup env
        run: . ./hack/ci/setup-env.sh
      - id: set-matrix-app
        run: echo "::set-output ${APPS}"
      - id: set-matrix-test
        run: echo "::set-output ${TESTS}"
      - id: set-matrix-infra
        run: echo "::set-output ${INFRAS}"
      - id: set-matrix-tool
        run: echo "::set-output ${TOOLS}"

  build-apps:
    name: Build ${{ matrix.APP }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-app)}}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: |
          make build-app-image-${{ matrix.APP }}
          make save-app-image-${{ matrix.APP }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.APP }}-${{github.sha}}
          path: /tmp/${{ matrix.APP }}.tar
          retention-days: 1

  push-apps:
    name: Push ${{ matrix.APP }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [prepare-matrix, build-apps]
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-app)}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.APP }}-${{github.sha}}
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/${{ matrix.APP }}.tar
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: make push-app-image-${{ matrix.APP }}
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ matrix.APP }}-${{github.sha}}

  build-tests:
    name: Build ${{ matrix.TEST }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-test)}}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: |
          make build-test-image-${{ matrix.TEST }}
          make save-test-image-${{ matrix.TEST }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: test-${{ matrix.TEST }}-${{github.sha}}
          path: /tmp/${{ matrix.TEST }}-test.tar
          retention-days: 1

  push-tests:
    name: Push ${{ matrix.TEST }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [prepare-matrix, build-tests]
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-test)}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: test-${{ matrix.TEST }}-${{github.sha}}
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/${{ matrix.TEST }}-test.tar
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: make push-test-image-${{ matrix.TEST }}
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: test-${{ matrix.TEST }}-${{github.sha}}

  build-infra:
    name: Build ${{ matrix.INFRA }}
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-matrix.outputs.matrix-infra != '' && github.event.pull_request.draft == false }}
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-infra)}}
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: |
          make build-infra-image-${{ matrix.INFRA }}
          make save-infra-image-${{ matrix.INFRA }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: infra-${{ matrix.INFRA }}-${{github.sha}}
          path: /tmp/infra-${{ matrix.INFRA }}.tar
          retention-days: 1

  push-infra:
    name: Push ${{ matrix.INFRA }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [prepare-matrix, build-infra]
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-infra)}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: infra-${{ matrix.INFRA }}-${{github.sha}}
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/infra-${{ matrix.INFRA }}.tar
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - run: make push-infra-image-${{ matrix.INFRA }}
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: infra-${{ matrix.INFRA }}-${{github.sha}}

  build-cli:
    name: Build Capact CLI
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      # Go is available by default but the expected version may differ, better to "hardcode" version
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Set up GoReleaser
        run: go install github.com/goreleaser/goreleaser@v1.1.0
      - run: make build-tool-cli
      - name: Share Capact CLI for integration tests bootstrapping
        uses: actions/upload-artifact@v2
        with:
          name: cli_${{github.sha}}
          path: ${{ github.workspace }}/bin/capact_linux_amd64/capact
          retention-days: 1 # Default 90 days

  localhub-tests:
    name: Local Hub tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [ push-apps, push-tests, build-cli ]
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - name: Run local Hub tests
        env:
          BUILD_IMAGES: "false"
        run: |
          make test-localhub

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [ push-apps, push-tests, build-cli ]
    permissions:
      contents: read
    env:
      CAPACT_BINARY: "${{ github.workspace}}/capact"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup environment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          . ./hack/ci/setup-env.sh
      - name: Download Capact CLI
        uses: actions/download-artifact@v2
        with:
          name: cli_${{github.sha}}
          path: ${{ github.workspace }}
      - name: Setup Capact CLI
        run: |
          chmod +x $CAPACT_BINARY
          $CAPACT_BINARY version
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run K8s Controller integration tests
        run: |
          make test-k8s-controller
      - name: Run cross-functional integration tests
        env:
          BUILD_IMAGES: "false"
          ARTIFACTS: "output/"
          DISABLE_MONITORING_INSTALLATION: "true"
        run: |
          make test-integration
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cluster_dump_${{github.sha}}
          path: "output"
          retention-days: 5 # Default 90 days
      - name: Delete Capact CLI artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: cli_${{github.sha}}

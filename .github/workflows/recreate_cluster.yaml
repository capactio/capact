name: Recreate development cluster

# One thing that's not mentioned in the documentation: the workflow must exist on the default branch for the "Run workflow" button to appear.
# Once you add it there, you can continue developing the action on its own branch and the changes will take effect when run using the button
# https://stackoverflow.com/questions/58933155/manual-workflow-triggers-in-github-actions
on:
  workflow_dispatch:
    inputs:
      gitCommitSHA:
        description: Git commit SHA. If not provided, use the latest commit from branch.
        required: false
      overrideDockerTag:
        description: Docker images tag. If not provided images generated from git commit SHA are used.
        required: false
      oldClusterToDelete:
        description: Name of the old cluster to delete. If not provided, the delete step will be skipped.
        required: false

jobs:
  recreate-cluster:
    name: Recreate cluster
    runs-on: ubuntu-latest

    steps:
      - name: Clone Repository (Latest)
        uses: actions/checkout@v2
        if: github.event.inputs.gitCommitSHA == ''
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v2
        if: github.event.inputs.gitCommitSHA != ''
        with:
          ref: ${{ github.event.inputs.gitCommitSHA }}
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          export_default_credentials: true
          service_account_key: ${{ secrets.CAPACT_GKE_CREDS }}
      - name: Setup terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
      - name: Delete old cluster
        env:
          OLD_CLUSTER_NAME: ${{ github.event.inputs.oldClusterToDelete }}
        if: github.event.inputs.oldClusterToDelete != ''
        run: |
          gcloud config set project ${PROJECT_ID}
          cd hack/ci/terraform
          gsutil cp gs://${RECREATE_CLUSTER_GCS_BUCKET}/tf/${OLD_CLUSTER_NAME}/*.tfstate .
          terraform init
          terraform destroy -auto-approve
      - name: Create cluster
        run: |
          gcloud config set project ${PROJECT_ID}
          cd hack/ci/terraform
          terraform init
          terraform apply -auto-approve
          gsutil cp *.tfstate gs://${RECREATE_CLUSTER_GCS_BUCKET}/tf/${TF_VAR_cluster_name}
      - name: Get cluster credentials
        run: |
          gcloud config set project ${PROJECT_ID}
          gcloud container clusters get-credentials ${TF_VAR_cluster_name} --zone=${TF_VAR_region}
      - name: Network enable
        id: network-enable
        run: |
          AUTHORIZED=$(printf "%s/32" $(curl ${GET_IP_SERVICE}))
          gcloud container clusters update ${TF_VAR_cluster_name} --zone ${TF_VAR_region} --enable-master-authorized-networks \
          --master-authorized-networks ${AUTHORIZED}
          echo "::set-output name=JOB_IP::$AUTHORIZED"
      - name: Install components
        env:
          OVERRIDE_DOCKER_TAG: ${{ github.event.inputs.overrideDockerTag }}
          USE_TEST_SETUP: "true"
        run: |
          export CUSTOM_NGINX_SET_FLAGS="--set ingress-nginx.controller.service.loadBalancerIP=${LOAD_BALANCER_EXTERNAL_IP}"
          ./hack/ci/cluster-components-install-upgrade.sh
      - name: Configure Cert Manager in cluster
        run: |
          ./hack/ci/install-cert-manager.sh
          . ./hack/ci/compare-cert.sh
      - name: Store secrets
        run: |
          ./hack/ci/backup-cert.sh

      - name: Network cleanup
        # The `always()` is needed as "If your if expression does not contain any of the status functions it will automatically result with success(). "
        # Without that it will results in: `Evaluating: (success() && (steps.network-enable.outcome == 'success'))`
        # source: https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions
        if: ${{ always() && steps.network-enable.outcome == 'success' }}
        env:
          IP_ADDED_JOB: "${{ steps.network-enable.outputs.JOB_IP }}"
        run: |
          ./hack/ci/remove-job-ip.sh

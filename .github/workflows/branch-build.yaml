name: Default branch build

on:
  push:
    paths:
      - "**.go"
      - "**.graphql"
      - ".github/workflows/**"
      - "**.sh"
      - "Makefile"
    branches:
      - "devops*"

jobs:
  entry-tests:
    name: Lint and test code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run linting
        run: |
          make test-lint
      - name: Run unit tests
        run: make test-unit
      - name: Check generated files
        run: |
          make test-generated

  prepare-matrix:
    name: Prepare components build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-app: ${{ steps.set-matrix-app.outputs.matrix }}
      matrix-test: ${{ steps.set-matrix-test.outputs.matrix }}
      matrix-infra: ${{ steps.set-matrix-infra.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: setup env
        run: . ./hack/ci/setup-env.sh
      - id: set-matrix-app
        run: echo "::set-output ${APPS}"
      - id: set-matrix-test
        run: echo "::set-output ${TESTS}"
      - id: set-matrix-infra
        run: echo "::set-output ${INFRAS}"

  build-app:
    name: Build ${{ matrix.APP }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-app)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-app-image-${{ matrix.APP }}
      - run: make push-app-image-${{ matrix.APP }}

  build-tests:
    name: Build ${{ matrix.TEST }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-test)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-test-image-${{ matrix.TEST }}
      - run: make push-test-image-${{ matrix.TEST }}

  build-infra:
    name: Build ${{ matrix.INFRA }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-infra)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-infra-image-${{ matrix.INFRA }}
      - run: make push-infra-image-${{ matrix.INFRA }}

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [build-app, build-infra, build-tests]    
    steps:    
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run K8s Controller integration tests
        run: |
          make test-k8s-controller
      - name: Run cross-functional integration tests
        env:
          BUILD_IMAGES: "false"
        run: |
          make test-integration

  update-cluster:
    name: Update cluster
    runs-on: ubuntu-latest
    needs: [ integration-tests ] 

    steps:    
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Get cluster credentials
        run: | 
          gcloud config set project ${PROJECT_ID}
          gcloud container clusters get-credentials ${TF_VAR_cluster_name} --zone=${TF_VAR_region}        
      - name: Network enable
        run: | 
          sudo snap install yq
          IP_ADDED_JOB=$(curl ${GET_IP_SERVICE})
          echo "export IP_ADDED_JOB=${IP_ADDED_JOB}" >job_ip.sh
          AUTHORIZED=$(gcloud container clusters describe ${TF_VAR_cluster_name} --zone ${TF_VAR_region} |yq r - 'masterAuthorizedNetworksConfig.cidrBlocks[*].cidrBlock')
          AUTHORIZED=$(echo ${AUTHORIZED} | tr ' ' ',' | sed 's/^,//g;s/ //g')
          AUTHORIZED=$(printf "%s,%s/32" "${AUTHORIZED}" "${IP_ADDED_JOB}" |sed s/^,//g)
          gcloud container clusters update ${TF_VAR_cluster_name} --zone ${TF_VAR_region} --enable-master-authorized-networks \
          --master-authorized-networks ${AUTHORIZED}
      - name: Save job ip
        uses: actions/upload-artifact@v1
        with:
          name: job_ip
          path: job_ip.sh
      - name: Upgrade components
        run: | 
          helm upgrade voltron ./deploy/kubernetes/charts/voltron -n ${NAMESPACE} \
          --set global.containerRegistry.overrideTag=${DOCKER_TAG}

      
  network-cleanup:
    name: Network access cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [ update-cluster ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Download job ip
        uses: actions/download-artifact@v1
        with:
          name: job_ip
      - name: Network cleanup
        run: | 
          . job_ip/job_ip.sh
          sudo snap install yq
          gcloud config set project ${PROJECT_ID}
          AUTHORIZED=$(gcloud container clusters describe ${TF_VAR_cluster_name} --zone ${TF_VAR_region} \
          |yq r - 'masterAuthorizedNetworksConfig.cidrBlocks[*].cidrBlock' |grep -v ${IP_ADDED_JOB}) || true
          AUTHORIZED=$(echo ${AUTHORIZED} | tr ' ' ',' | sed 's/^,//g;s/ //g') || true
          if [ -z ${AUTHORIZED} ]
          then
            gcloud container clusters update ${TF_VAR_cluster_name} --zone ${TF_VAR_region} --no-enable-master-authorized-networks
            gcloud container clusters update ${TF_VAR_cluster_name} --zone ${TF_VAR_region} --enable-master-authorized-networks
          else
            gcloud container clusters update ${TF_VAR_cluster_name} --zone ${TF_VAR_region} --enable-master-authorized-networks \
          --master-authorized-networks ${AUTHORIZED}
          fi 



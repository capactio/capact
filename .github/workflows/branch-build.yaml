name: Default branch build

on:
  push:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "**.graphql"
      - ".github/workflows/**"
      - "**.sh"
      - "Makefile"
      - "deploy/**"
      - "!**.md"
    branches:
      - "master"

jobs:
  entry-tests:
    name: Lint and test code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run linting
        run: |
          make test-lint
      - name: Run unit tests
        run: make test-unit
      - name: Check generated files
        run: |
          make test-generated

  prepare-matrix:
    name: Prepare components build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-app: ${{ steps.set-matrix-app.outputs.matrix }}
      matrix-test: ${{ steps.set-matrix-test.outputs.matrix }}
      matrix-infra: ${{ steps.set-matrix-infra.outputs.matrix }}
      matrix-tool: ${{ steps.set-matrix-tool.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: setup env
        run: . ./hack/ci/setup-env.sh
      - id: set-matrix-app
        run: echo "::set-output ${APPS}"
      - id: set-matrix-test
        run: echo "::set-output ${TESTS}"
      - id: set-matrix-infra
        run: echo "::set-output ${INFRAS}"
      - id: set-matrix-tool
        run: echo "::set-output ${TOOLS}"

  build-app:
    name: Build ${{ matrix.APP }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-app)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-app-image-${{ matrix.APP }}
      - run: make push-app-image-${{ matrix.APP }}

  build-tests:
    name: Build ${{ matrix.TEST }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-test)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-test-image-${{ matrix.TEST }}
      - run: make push-test-image-${{ matrix.TEST }}

  build-infra:
    name: Build ${{ matrix.INFRA }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-infra)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCR_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: gcloud auth configure-docker --project ${PROJECT_ID} -q
      - run: make build-infra-image-${{ matrix.INFRA }}
      - run: make push-infra-image-${{ matrix.INFRA }}

  build-tools:
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix-tool)}}
    needs: prepare-matrix
    name: Build ${{ matrix.TOOL }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - run: make build-tool-${{ matrix.tool }}

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [ build-app, build-infra, build-tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Run K8s Controller integration tests
        run: |
          make test-k8s-controller
      - name: Run cross-functional integration tests
        env:
          BUILD_IMAGES: "false"
        run: |
          make test-integration

  update-cluster:
    name: Update cluster
    runs-on: ubuntu-latest
    needs: [ integration-tests, entry-tests ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_CREDS }}
          export_default_credentials: true
      - name: Setup environment
        run: |
          . ./hack/ci/setup-env.sh
      - name: Get cluster credentials
        run: |
          gcloud config set project ${PROJECT_ID}
          gcloud container clusters get-credentials ${TF_VAR_cluster_name} --zone=${TF_VAR_region}        
      - name: Network enable
        id: network-enable
        run: | 
          ./hack/ci/add-job-ip.sh
      - name: Install and upgrade existing components
        run: |
          ./hack/ci/cluster-components-install-upgrade.sh
      - name: Network cleanup
        # The `always()` is needed to always run the step, even if previous ones failed. From docs: "If your if expression does not contain any of the status functions it will automatically result with success()."
        # Without that it will result in: `Evaluating: (success() && (steps.network-enable.outcome == 'success'))`
        # source: https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions
        if: ${{ always() && steps.network-enable.outcome == 'success' }}
        env:
          IP_ADDED_JOB: "${{ steps.network-enable.outputs.JOB_IP }}"
        run: |
          ./hack/ci/remove-job-ip.sh

scalar Any

"""
Full path of a given node, e.g. cap.core.type.platform.kubernetes
"""
scalar NodePath

"""
Pattern of the path of a given node, e.g. cap.core.type.platform.*
"""
scalar NodePathPattern

"""
Path for the parent node, e.g. for Interface it is InterfaceGroup path.
"""
scalar NodePrefix

"""
Name of a given node. Name is immutable between different revisions of a given node.
"""
scalar NodeName

"""
Version in semantic versioning, e.g. 1.1.0
"""
scalar Version

"""
Range of versions, e.g. "1.14.x, 1.15.0 - 1.15.3"
"""
scalar VersionRange

"""
String that contains JSON schema
"""
scalar JSONSchema

input InterfaceFilter {
    prefixPattern: NodePathPattern
}

input ImplementationFilter {
    prefixPattern: NodePathPattern

    """
    If provided, Implementations are filtered by the ones that have satisfied requirements with provided TypeInstance values.
    For example, to find all Implementations that can be run on a given system, user can provide values of all existing TypeInstances.
    """
    requirementsSatisfiedBy: [TypeInstanceValue!]
    tags: [TagFilterInput!]
}

input TypeInstanceValue {
    typeRef: TypeReferenceInput

    """
    Value of the available requirement. If not provided, all valueConstraints conditions are treated as satisfied.
    Currently not supported.
    """
    value: Any
}

input TypeReferenceInput {
    path: NodePath!

    """
    If not provided, latest revision for a given Type is used
    """
    revision: Version
}

input TagFilterInput {
    rule: FilterRule = INCLUDE
    path: NodePath!

    """
    If not provided, latest revision for a given Tag is used
    """
    revision: String
}

enum FilterRule {
    INCLUDE, EXCLUDE
}

input InterfaceGroupFilter {
    prefixPattern: NodePathPattern
}

input TagFilter {
    prefixPattern: NodePathPattern
}

input TypeFilter {
    prefixPattern: NodePathPattern
}

type RepoMetadata {
    name: NodeName!
    prefix: NodePrefix!
    path: NodePath!

    latestRevision: RepoMetadataRevision
    revision(revision: Version!): RepoMetadataRevision
    revisions: [RepoMetadataRevision!]!
}

type RepoMetadataRevision {
    metadata: GenericMetadata!
    revision: Version!
    spec: RepoMetadataSpec!
    signature: Signature!
}

type RepoMetadataSpec {
    ochVersion: Version!
    ocfVersion: RepoOCFVersion!
    implementation: RepoImplementationConfig!
}

type RepoImplementationConfig {
    appVersion: RepoImplementationAppVersionConfig!
}

type RepoImplementationAppVersionConfig {
    semVerTaggingStrategy: SemVerTaggingStrategy!
}

type SemVerTaggingStrategy {
    latest: LatestSemVerTaggingStrategy!
}

type LatestSemVerTaggingStrategy {
    pointsTo: SemVerTaggingStrategyTags!
}

enum SemVerTaggingStrategyTags {
    STABLE, EDGE
}

type RepoOCFVersion {
    default: Version!
    supported: [Version!]!
}

type InterfaceGroup {
    metadata: GenericMetadata!
    interfaces(filter: InterfaceFilter): [Interface!]!
}

type Interface {
    name: NodeName!
    prefix: NodePrefix!
    path: NodePath!

    latestRevision: InterfaceRevision
    revision(revision: Version!): InterfaceRevision
    revisions: [InterfaceRevision!]!
}

type InterfaceRevision {
    metadata: GenericMetadata!
    revision: Version!
    spec: InterfaceSpec!

    """
    List Implementations for a given Interface
    """
    implementations(filter: ImplementationFilter): [Implementation!]!
    signature: Signature!
}

type InterfaceSpec {
    input: JSONSchema!
    output: JSONSchema!
}

type Type {
    name: NodeName!
    prefix: NodePrefix!
    path: NodePath!

    latestRevision: TypeRevision
    revision(revision: Version!): TypeRevision
    revisions: [TypeRevision!]!
}

type TypeRevision {
    metadata: TypeMetadata!
    revision: Version!
    spec: TypeSpec!
    signature: Signature!
}

type TypeSpec {
    additionalRefs: [NodePath!]
    jsonSchema: JSONSchema
}

type Implementation {
    name: NodeName!
    prefix: NodePrefix!
    path: NodePath!

    latestRevision: ImplementationRevision
    revision(revision: Version!): ImplementationRevision
    revisions: [ImplementationRevision!]!
}

type ImplementationRevision {
    metadata: ImplementationMetadata!
    revision: Version!
    spec: ImplementationSpec!

    interfaces: [Interface!]! # resolver based on "implements" section
    signature: Signature!
}

type ImplementationSpec {
    appVersion: VersionRange!
    implements: [InterfaceReference!]!
    requires: [ImplementationRequirement!]!
    imports: [ImplementationImport!]
    action: ImplementationAction!
}

type InterfaceReference {
    path: NodePath!
    revision: Version!
}

type ImplementationRequirement {
    prefix: NodePrefix!
    oneOf: [ImplementationRequirementItem!]!
    anyOf: [ImplementationRequirementItem!]!
    allOf: [ImplementationRequirementItem!]!
}

type ImplementationRequirementItem {
    typeRef: TypeReference!

    """
    Holds the configuration constraints for the given entry based on Type value.
    Currently not supported.
    """
    valueConstraints: Any
}

type TypeReference {
    path: NodePath!
    revision: Version!
}

type ImplementationImport {
    interfaceGroupPath: NodePath!
    alias: String
    appVersion: VersionRange
    methods: [ImplementationImportMethod!]!
}

type ImplementationImportMethod {
    name: NodeName!
}

type ImplementationAction {
    """
    The Interface or Implementation of a runner, which handles the execution, for example, cap.interface.runner.helm3.run
    """
    runnerInterface: String!
    args: Any
}

type Tag {
    name: NodeName!
    prefix: NodePrefix!
    path: NodePath!

    latestRevision: TagRevision
    revision(revision: Version!): TagRevision
    revisions: [TagRevision!]!
}

type TagRevision {
    metadata: GenericMetadata!
    revision: Version!
    spec: TagSpec!
    signature: Signature!
}

# It is defined to make sure that all metadata types have the same base fields.
# Unfortunately all Types that implement an Interface have to repeat the same fields,
# however it's the only way to do so.
interface MetadataBaseFields {
    name: NodeName!
    prefix: NodePrefix # resolver
    path: NodePath
    displayName: String
    description: String!
    maintainers: [Maintainer!]!
    documentationURL: String
    supportURL: String
    iconURL: String
}

type GenericMetadata implements MetadataBaseFields {
    name: NodeName!
    prefix: NodePrefix # resolver
    path: NodePath
    displayName: String
    description: String!
    maintainers: [Maintainer!]!
    documentationURL: String
    supportURL: String
    iconURL: String
}

type ImplementationMetadata implements MetadataBaseFields {
    name: NodeName!
    prefix: NodePrefix # resolver
    path: NodePath
    displayName: String
    description: String!
    maintainers: [Maintainer!]!
    documentationURL: String
    supportURL: String
    iconURL: String
    tags: [Tag!]!
}

type TypeMetadata implements MetadataBaseFields {
    name: NodeName!
    prefix: NodePrefix # resolver
    path: NodePath
    displayName: String
    description: String!
    maintainers: [Maintainer!]!
    documentationURL: String
    supportURL: String
    iconURL: String
    tags: [Tag!]!
}

type Signature {
    och: String!
}

type Maintainer {
    name: String
    email: String!
    url: String
}

type TagSpec {
    additionalRefs: [NodePath!]!
}

type Query {
    repoMetadata: RepoMetadata

    interfaceGroups(filter: InterfaceGroupFilter): [InterfaceGroup!]!
    interfaceGroup(path: NodePath!): InterfaceGroup

    interfaces(filter: InterfaceFilter): [Interface!]!
    interface(path: NodePath!): Interface

    types(filter: TypeFilter): [Type!]!
    type(path: NodePath!): Type

    implementations(filter: ImplementationFilter): [Implementation!]!
    implementation(path: NodePath!): Implementation

    tags(filter: TagFilter): [Tag!]!
    tag(path: NodePath!): Tag
}

type Mutation {
    # No mutations for now, as all resources are populated with DB populator
}

# TODO: Prepare directive for user authorization in https://cshark.atlassian.net/browse/SV-65

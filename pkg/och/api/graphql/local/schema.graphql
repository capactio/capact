"""
Arbitrary data
"""
scalar Any

"""
Full path of a given node, e.g. cap.core.type.platform.kubernetes
"""
scalar NodePath

"""
Version in semantic versioning, e.g. 1.1.0
"""
scalar Version

input CreateTypeInstanceInput {
  typeRef: String!
  tags: [TagReferenceInput!]
  value: Any
}

input UpdateTypeInstanceInput {
  typeRef: String!
  tags: [TagReferenceInput!]
  value: Any
  resourceVersion: Int!
}

type TypeInstance {
  metadata: TypeInstanceMetadata!
  resourceVersion: Int!
  spec: TypeInstanceSpec!
}

type TypeInstanceSpec {
  typeRef: TypeReference!
  value: Any!
  instrumentation: TypeInstanceInstrumentation
}

type TypeInstanceMetadata {
  id: ID!
  tags: [TagReference!]!
}

type TypeReference {
  path: NodePath!
  revision: Version!
}

input TagReferenceInput {
  path: NodePath!

  """
  If not provided, latest revision for a given Tag is used
  """
  revision: Version
}

type TagReference {
  path: NodePath!
  revision: Version!
}

type TypeInstanceInstrumentation {
  metrics: TypeInstanceInstrumentationMetrics
  health: TypeInstanceInstrumentationHealth
}

type TypeInstanceInstrumentationMetrics {
  endpoint: String
  regex: String # optional regex for scraping metrics
  dashboards: [TypeInstanceInstrumentationMetricsDashboard!]!
}

type TypeInstanceInstrumentationMetricsDashboard {
  url: String!
}

type TypeInstanceInstrumentationHealth {
  url: String
  method: HTTPRequestMethod

  # resolver, which does a HTTP call on a given URL
  # and expects status code greater than or equal to 200
  # and less than 400
  status: TypeInstanceInstrumentationHealthStatus
}

enum TypeInstanceInstrumentationHealthStatus {
  UNKNOWN
  READY
  FAILING
}

enum HTTPRequestMethod {
  GET
  POST
}

input TagFilterInput {
  path: NodePath!
  rule: FilterRule = INCLUDE

  """
  If not provided, latest revision for a given Tag is used
  """
  revision: Version
}

enum FilterRule {
  INCLUDE
  EXCLUDE
}

input TypeInstanceFilter {
  tag: [TagFilterInput]
  typeRef: TypeRefFilterInput
}

input TypeRefFilterInput {
  path: NodePath!

  """
  If not provided, latest revision for a given Type is used
  """
  revision: Version
}

type Query {
  typeInstances(filter: TypeInstanceFilter): [TypeInstance!]!
  typeInstance(id: ID!): TypeInstance
}

type Mutation {
  createTypeInstance(in: CreateTypeInstanceInput): TypeInstance!
  updateTypeInstance(id: ID!, in: UpdateTypeInstanceInput): TypeInstance!
  deleteTypeInstance(id: ID!): TypeInstance!
}

# TODO: Prepare directive for user authorization in https://cshark.atlassian.net/browse/SV-65

args:
  workflow:
    arguments: {}
    entrypoint: voltron-root
    templates:
    - arguments: {}
      inputs:
        artifacts:
        - name: input-parameters
        - name: postgresql
          optional: true
      metadata: {}
      name: jira-install
      outputs:
        artifacts:
        - from: '{{steps.helm-run.outputs.artifacts.additional}}'
          name: jira-config
      steps:
      - - arguments:
            artifacts:
            - from: '{{workflow.outputs.artifacts.postgresql}}'
              name: postgresql
          name: install-db
          template: mock-jira-install-install-db
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  command: "install"
                  generateName: true
                  chart:
                    name: "jira-software"
                    repo: "https://helm.mox.sh"
                  output:{% raw %}
                    goTemplate:
                      version: "{{ .Values.image.tag }}"
                      host: '{{ template "jira-software.fullname" . }}'{% endraw %}
                  values:
                    postgresql:
                      enabled: false
                    databaseConnection:
                      host: "{{ host }}"
                      user: "{{ superuser.username }}"
                      password: "{{ superuser.password }}"
                      database: "{{ defaultDBName }}"
                    ingress:
                      enabled: true
                      hosts:
                      - host: jira-cloud.voltron.local
                        paths: ['/']
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: input-parameters
          name: create-helm-args
          template: jira-install-create-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-run
          template: jira-install-helm-run-helm
      - - arguments:
            artifacts:
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: postgresql
          name: output-postgresql
          template: output-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.additional}}'
              name: jira-config
          name: output-jira-config
          template: output-jira-config
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.helm-release}}'
              name: jira-helm-release
          name: output-jira-helm-release
          template: output-jira-helm-release
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
      metadata: {}
      name: mock-jira-install-install-db
      outputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-create-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        image: gcr.io/projectvoltron/pr/helm-runner:PR-113
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: jira-install-helm-run-helm
      outputs:
        artifacts:
        - globalName: jira-install-helm-run-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: jira-install-helm-run-additional
          name: additional
          path: /additional.yaml
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: output-postgresql
      outputs:
        artifacts:
        - globalName: postgresql
          name: postgresql
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: jira-config
          path: /typeinstance
      metadata: {}
      name: output-jira-config
      outputs:
        artifacts:
        - globalName: jira-config
          name: jira-config
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: jira-helm-release
          path: /typeinstance
      metadata: {}
      name: output-jira-helm-release
      outputs:
        artifacts:
        - globalName: jira-helm-release
          name: jira-helm-release
          path: /typeinstance
    - arguments: {}
      inputs: {}
      metadata: {}
      name: voltron-root
      outputs: {}
      steps:
      - - arguments: {}
          name: inject-input-type-instances-uuid-step
          template: inject-input-type-instances-uuid
      - - arguments: {}
          name: inject-runner-context-step
          template: inject-runner-context
      - - arguments: {}
          name: populate-user-input-step
          template: populate-user-input
      - - arguments:
            artifacts:
            - from: '{{steps.populate-user-input-step.outputs.artifacts.input-parameters}}'
              name: input-parameters
          name: start-entrypoint
          template: jira-install
      - - arguments:
            artifacts:
            - from: '{{workflow.outputs.artifacts.jira-config}}'
              name: jira-config
            - from: '{{workflow.outputs.artifacts.jira-install-helm-run-helm-release}}'
              name: jira-install-helm-run-helm-release
            - name: payload
              raw:
                data: |
                  typeInstances:
                  - alias: jira-config
                    attributes: []
                    typeRef:
                      path: cap.type.productivity.jira.config
                      revision: 0.1.0
                    value: null
                  - alias: jira-install-helm-run-helm-release
                    attributes: []
                    typeRef:
                      path: cap.type.helm.chart.release
                      revision: 0.1.0
                    value: null
                  usesRelations:
                  - from: jira-config
                    to: jira-install-helm-run-helm-release
                  - from: jira-config
                    to: postgresql
          name: upload-output-type-instances-step
          template: upload-output-type-instances
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /output
          name: user-secret-volume
      inputs: {}
      metadata: {}
      name: populate-user-input
      outputs:
        artifacts:
        - name: input-parameters
          path: /output/parameters.json
      volumes:
      - name: user-secret-volume
        secret:
          items:
          - key: parameters.json
            path: parameters.json
          optional: false
          secretName: user-input
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: runner-context
          readOnly: true
      inputs: {}
      metadata: {}
      name: inject-runner-context
      outputs:
        artifacts:
        - globalName: runner-context
          name: runner-context
          path: /input/context.yaml
      volumes:
      - name: runner-context
        secret:
          items:
          - key: key
            path: context.yaml
          optional: false
          secretName: secret
    - arguments: {}
      container:
        env:
        - name: APP_ACTION
          value: DownloadAction
        - name: APP_DOWNLOAD_CONFIG
          value: '{c268d3f5-8834-434b-bea2-b677793611c5,/gcp.yaml},{f2421415-b8a4-464b-be12-b617794411c5,/postgresql.yaml}'
        image: alpine:3.7
        name: ""
        resources: {}
      inputs: {}
      metadata: {}
      name: inject-input-type-instances-uuid
      outputs:
        artifacts:
        - globalName: gcp
          name: gcp
          path: /gcp.yaml
        - globalName: postgresql
          name: postgresql
          path: /postgresql.yaml
    - arguments: {}
      container:
        env:
        - name: APP_ACTION
          value: UploadAction
        - name: APP_UPLOAD_CONFIG_PAYLOAD_FILEPATH
          value: /upload/payload
        - name: APP_UPLOAD_CONFIG_TYPE_INSTANCES_DIR
          value: /upload/typeInstances
        image: alpine:3.7
        imagePullPolicy: IfNotPresent
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: jira-config
          path: /upload/typeInstances/jira-config
        - name: jira-install-helm-run-helm-release
          path: /upload/typeInstances/jira-install-helm-run-helm-release
        - name: payload
          path: /upload/payload
      metadata: {}
      name: upload-output-type-instances
      outputs: {}
runnerInterface: cap.interface.runner.argo.run

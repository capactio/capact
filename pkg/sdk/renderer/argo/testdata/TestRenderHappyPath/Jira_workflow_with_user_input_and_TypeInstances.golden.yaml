args:
  workflow:
    arguments:
      artifacts:
      - name: input-parameters
        raw:
          data: |
            defaultDBName: test
            superuser:
              password: s3cr3t
              username: postgres
    entrypoint: jira-install
    templates:
    - arguments: {}
      inputs:
        artifacts:
        - name: input-parameters
      metadata: {}
      name: jira-install
      outputs: {}
      steps:
      - - arguments: {}
          name: inject-gcp-step
          template: inject-gcp
      - - arguments: {}
          name: inject-runner-context-step
          template: inject-runner-context
      - - arguments:
            artifacts:
            - name: input-parameters
              raw:
                data: |
                  superuser:
                    username: superuser
                    password: okon
                  defaultDBName: postgres
          name: install-db
          template: jira-install-install-db-postgres-install
      - - arguments:
            artifacts:
            - from: '{{workflow.outputs.artifacts.jira-install-install-db-postgresql}}'
              name: postgresql
            - name: database-input
              raw:
                data: |
                  name: jiradb
                  owner: superuser
          name: create-db
          template: jira-install-create-db-main
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  command: "install"
                  generateName: true
                  chart:
                    name: "jira-software"
                    repo: "https://helm.mox.sh"
                  output:{% raw %}
                    goTemplate:
                      version: "{{ .Values.image.tag }}"
                      host: '{{ template "jira-software.fullname" . }}'{% endraw %}
                  values:
                    postgresql:
                      enabled: false
                    databaseConnection:
                      host: "{{ host }}"
                      user: "{{ superuser.username }}"
                      password: "{{ superuser.password }}"
                      database: "{{ defaultDBName }}"
                    ingress:
                      enabled: true
                      hosts:
                      - host: jira-cloud.voltron.local
                        paths: ['/']
            - from: '{{workflow.outputs.artifacts.jira-install-install-db-postgresql}}'
              name: input-parameters
          name: render-helm-args
          template: jira-install-render-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.render-helm-args.outputs.artifacts.render}}'
              name: template
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: input-parameters
          name: fill-params-in-helm-args
          template: jira-install-fill-params-in-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.fill-params-in-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-run
          template: jira-install-helm-run-helm
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: output-database
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.additional}}'
              name: jira-config
          name: output-jira-config
          template: output-jira-config
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.helm-release}}'
              name: jira-helm-release
          name: output-jira-helm-release
          template: output-jira-helm-release
    - arguments: {}
      inputs:
        artifacts:
        - name: input-parameters
      metadata: {}
      name: jira-install-install-db-postgres-install
      outputs: {}
      steps:
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
            - name: template
              raw:
                data: |
                  command: "install"
                  generateName: true
                  chart:
                    name: "postgresql"
                    repo: "https://charts.bitnami.com/bitnami"
                  values:
                    image:
                      pullPolicy: Always
                    postgresqlDatabase: {{ defaultDBName }}
                    postgresqlUsername: {{ superuser.username }}
                    postgresqlPassword: {{ superuser.password }}
                  output:{% raw %}
                    goTemplate:
                      host: '{{ template "common.names.fullname" . }}'
                      port: '{{ template "postgresql.port" . }}'
                      defaultDBName: '{{ template "postgresql.database" . }}'
                      superuser:
                        username: '{{ template "postgresql.username" . }}'
                        password: '{{ template "postgresql.password" . }}'{% endraw %}
          name: create-helm-args
          template: jira-install-install-db-postgres-install-create-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-run
          template: jira-install-install-db-postgres-install-helm-run-helm
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.additional}}'
              name: postgresql
          name: output-postgresql
          template: jira-install-install-db-output-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.helm-run.outputs.artifacts.helm-release}}'
              name: psql-helm-release
          name: output-psql-helm-release
          template: jira-install-install-db-output-psql-helm-release
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-install-db-postgres-install-create-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        image: gcr.io/projectvoltron/pr/helm-runner:PR-113
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: jira-install-install-db-postgres-install-helm-run-helm
      outputs:
        artifacts:
        - globalName: jira-install-install-db-postgres-install-helm-run-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: jira-install-install-db-postgres-install-helm-run-additional
          name: additional
          path: /additional.yaml
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: jira-install-install-db-output-postgresql
      outputs:
        artifacts:
        - globalName: jira-install-install-db-postgresql
          name: postgresql
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: psql-helm-release
          path: /typeinstance
      metadata: {}
      name: jira-install-install-db-output-psql-helm-release
      outputs:
        artifacts:
        - globalName: jira-install-install-db-psql-helm-release
          name: psql-helm-release
          path: /typeinstance
    - arguments: {}
      inputs:
        artifacts:
        - name: postgresql
        - name: database-input
      metadata: {}
      name: jira-install-create-db-main
      outputs:
        artifacts:
        - from: '{{steps.create-db.outputs.artifacts.database}}'
          name: database
      steps:
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  export PGPASSWORD={{superuser.password}}
                  PSQL_CMD="psql -h {{host}} -U {{superuser.username}} {{defaultDBName}} -c"
                  {% raw %}
                  ${PSQL_CMD} "CREATE DATABASE {{name}}"
                  ${PSQL_CMD} "GRANT ALL PRIVILEGES ON DATABASE {{name}} TO {{owner}}"

                  cat <<EOF > /database.yml
                  name: {{name}}
                  owner: {{owner}}
                  tablespace: ""
                  EOF
                  {% endraw %}
            - from: '{{inputs.artifacts.postgresql}}'
              name: input-parameters
          name: render-create-db-script
          template: jira-install-create-db-main-render-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.render-create-db-script.outputs.artifacts.render}}'
              name: template
            - from: '{{inputs.artifacts.database-input}}'
              name: input-parameters
          name: fill-params-in-create-db-script
          template: jira-install-create-db-main-fill-params-in-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.fill-params-in-create-db-script.outputs.artifacts.render}}'
              name: script
          name: create-db
          template: jira-install-create-db-create-psql-db
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: jira-install-create-db-output-database
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-create-db-main-render-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-create-db-main-fill-params-in-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        args:
        - /script.sh
        command:
        - bash
        image: postgres:11
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: script
          path: /script.sh
      metadata: {}
      name: jira-install-create-db-create-psql-db
      outputs:
        artifacts:
        - name: database
          path: /database.yml
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: jira-install-create-db-output-database
      outputs:
        artifacts:
        - globalName: jira-install-create-db-database
          name: database
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-render-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: gcr.io/projectvoltron/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: jira-install-fill-params-in-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - arguments: {}
      container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        image: gcr.io/projectvoltron/pr/helm-runner:PR-113
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: jira-install-helm-run-helm
      outputs:
        artifacts:
        - globalName: jira-install-helm-run-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: jira-install-helm-run-additional
          name: additional
          path: /additional.yaml
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: output-database
      outputs:
        artifacts:
        - globalName: database
          name: database
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: jira-config
          path: /typeinstance
      metadata: {}
      name: output-jira-config
      outputs:
        artifacts:
        - globalName: jira-config
          name: jira-config
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: jira-helm-release
          path: /typeinstance
      metadata: {}
      name: output-jira-helm-release
      outputs:
        artifacts:
        - globalName: jira-helm-release
          name: jira-helm-release
          path: /typeinstance
    - arguments: {}
      container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: runner-context
          readOnly: true
      inputs: {}
      metadata: {}
      name: inject-runner-context
      outputs:
        artifacts:
        - globalName: runner-context
          name: runner-context
          path: /input/context.yaml
      volumes:
      - name: runner-context
        secret:
          items:
          - key: key
            path: context.yaml
          optional: false
          secretName: secret
    - arguments: {}
      container:
        args:
        - |-
          sleep 2 && echo 'auth_provider_x509_cert_url: fake
          auth_uri: fake
          client_email: fake
          client_id: fake
          client_x509_cert_url: fake
          private_key: fake
          private_key_id: fake
          project_id: projectvoltron
          token_uri: fake
          type: service_account
          ' | tee /output
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs: {}
      metadata: {}
      name: inject-gcp
      outputs:
        artifacts:
        - globalName: gcp
          name: gcp
          path: /output
runnerInterface: cap.interface.runner.argo.run

args:
  workflow:
    arguments: {}
    entrypoint: capact-root
    templates:
    - inputs:
        artifacts:
        - name: input-parameters
      metadata: {}
      name: stack-install
      outputs: {}
      steps:
      - - arguments:
            artifacts:
            - name: input-parameters
              raw:
                data: |
                  superuser:
                    username: superuser
                    password: okon
                  defaultDBName: postgres
          name: install-shared-db
          template: stack-install-install-shared-db-postgres-install
      - - arguments:
            artifacts:
            - from: '{{steps.install-shared-db.outputs.artifacts.postgresql}}'
              name: postgresql
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
          name: app1-install
          template: app1-install
        - arguments:
            artifacts:
            - from: '{{steps.install-shared-db.outputs.artifacts.postgresql}}'
              name: postgresql
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
          name: app2-install
          template: app2-install
    - inputs:
        artifacts:
        - name: input-parameters
      metadata: {}
      name: stack-install-install-shared-db-postgres-install
      outputs:
        artifacts:
        - from: '{{steps.helm-install.outputs.artifacts.additional}}'
          name: postgresql
      steps:
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
            - name: template
              raw:
                data: |
                  generateName: true
                  chart:
                    name: "postgresql"
                    repo: "https://charts.bitnami.com/bitnami"
                    version: "10.2.6"
                  values:
                    postgresqlDatabase: {{ defaultDBName }}
                    postgresqlUsername: {{ superuser.username }}
                    postgresqlPassword: {{ superuser.password }}
                  output:{% raw %}
                    goTemplate:
                      host: '{{ template "common.names.fullname" . }}'
                      port: '{{ template "postgresql.port" . }}'
                      defaultDBName: '{{ template "postgresql.database" . }}'
                      superuser:
                        username: '{{ template "postgresql.username" . }}'
                        password: '{{ template "postgresql.password" . }}'{% endraw %}
          name: create-helm-args
          template: stack-install-install-shared-db-postgres-install-create-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-install
          template: stack-install-install-shared-db-postgres-install-helm-install-helm
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.additional}}'
              name: postgresql
          name: output-postgresql
          template: output-stack-install-install-shared-db-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.helm-release}}'
              name: psql-helm-release
          name: output-psql-helm-release
          template: output-stack-install-install-shared-db-psql-helm-release
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: stack-install-install-shared-db-postgres-install-create-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        - name: RUNNER_COMMAND
          value: install
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        image: ghcr.io/capactio/pr/helm-runner:PR-252
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: stack-install-install-shared-db-postgres-install-helm-install-helm
      outputs:
        artifacts:
        - globalName: stack-install-install-shared-db-postgres-install-helm-install-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: stack-install-install-shared-db-postgres-install-helm-install-additional
          name: additional
          path: /additional.yaml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: output-stack-install-install-shared-db-postgresql
      outputs:
        artifacts:
        - globalName: stack-install-install-shared-db-postgresql
          name: postgresql
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: psql-helm-release
          path: /typeinstance
      metadata: {}
      name: output-stack-install-install-shared-db-psql-helm-release
      outputs:
        artifacts:
        - globalName: stack-install-install-shared-db-psql-helm-release
          name: psql-helm-release
          path: /typeinstance
    - inputs:
        artifacts:
        - name: input-parameters
        - name: postgresql
      metadata: {}
      name: app1-install
      outputs: {}
      steps:
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  host: {{ app1Host }}
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
          name: extract-app1-host
          template: app1-install-extract-app1-host-template
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.postgresql}}'
              name: postgresql
            - from: '{{steps.extract-app1-host.outputs.artifacts.render}}'
              name: input-parameters
          name: app1-install
          template: app1-install-app1-install-app1-install
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app1-install-extract-app1-host-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - inputs:
        artifacts:
        - name: input-parameters
        - name: postgresql
          optional: true
      metadata: {}
      name: app1-install-app1-install-app1-install
      outputs:
        artifacts:
        - from: '{{steps.helm-install.outputs.artifacts.additional}}'
          name: app1-config
      steps:
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.postgresql}}'
              name: postgresql
          name: install-db
          template: mock-app1-install-app1-install-app1-install-install-db
      - - arguments:
            artifacts:
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: postgresql
            - name: database-input
              raw:
                data: |
                  name: app1db
                  owner: superuser
          name: create-db
          template: app1-install-app1-install-app1-install-create-db-main
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  generateName: true
                  chart:
                    name: "app1-software"
                    repo: "https://helm.mox.sh"
                  output:{% raw %}
                    goTemplate:
                      version: "{{ .Values.image.tag }}"
                      host: '{{ template "app1-software.fullname" . }}'{% endraw %}
                  values:
                    postgresql:
                      enabled: false
                    databaseConnection:
                      host: "{{ host }}"
                      user: "{{ superuser.username }}"
                      password: "{{ superuser.password }}"
                      database: "{{ defaultDBName }}"
                    ingress:
                      enabled: true
                      hosts:
                      - host: app1-cloud.capact.local
                        paths: ['/']
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: input-parameters
          name: create-helm-args
          template: app1-install-app1-install-app1-install-create-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-install
          template: app1-install-app1-install-app1-install-helm-install-helm
      - - arguments:
            artifacts:
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: postgresql
          name: output-postgresql
          template: output-app1-install-app1-install-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: output-app1-install-app1-install-database
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.additional}}'
              name: app1-config
          name: output-app1-config
          template: output-app1-install-app1-install-app1-config
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.helm-release}}'
              name: app1-helm-release
          name: output-app1-helm-release
          template: output-app1-install-app1-install-app1-helm-release
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
      metadata: {}
      name: mock-app1-install-app1-install-app1-install-install-db
      outputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
    - inputs:
        artifacts:
        - name: postgresql
        - name: database-input
      metadata: {}
      name: app1-install-app1-install-app1-install-create-db-main
      outputs:
        artifacts:
        - from: '{{steps.create-db.outputs.artifacts.database}}'
          name: database
      steps:
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  export PGPASSWORD=<@ superuser.password @>
                  PSQL_CMD="psql -h <@host@> -U <@superuser.username@> <@defaultDBName@> -c"
                  ${PSQL_CMD} "CREATE DATABASE <@name@>"
                  ${PSQL_CMD} "GRANT ALL PRIVILEGES ON DATABASE <@name@> TO <@owner@>"

                  cat <<EOF > /database.yml
                  name: <@name@>
                  owner: <@owner@>
                  tablespace: ""
                  EOF
            - from: '{{inputs.artifacts.postgresql}}'
              name: input-parameters
          name: render-create-db-script
          template: app1-install-app1-install-app1-install-create-db-main-render-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.render-create-db-script.outputs.artifacts.render}}'
              name: template
            - from: '{{inputs.artifacts.database-input}}'
              name: input-parameters
          name: fill-params-in-create-db-script
          template: app1-install-app1-install-app1-install-create-db-main-fill-params-in-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.fill-params-in-create-db-script.outputs.artifacts.render}}'
              name: script
          name: create-db
          template: app1-install-app1-install-app1-install-create-db-create-psql-db
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: output-app1-install-app1-install-app1-install-create-db-database
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app1-install-app1-install-app1-install-create-db-main-render-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app1-install-app1-install-app1-install-create-db-main-fill-params-in-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        args:
        - sleep 1 && chmod +x /script.sh && /script.sh
        command:
        - bash
        - -c
        image: postgres:11
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: script
          path: /script.sh
      metadata: {}
      name: app1-install-app1-install-app1-install-create-db-create-psql-db
      outputs:
        artifacts:
        - name: database
          path: /database.yml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: output-app1-install-app1-install-app1-install-create-db-database
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-app1-install-create-db-database
          name: database
          path: /typeinstance
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app1-install-app1-install-app1-install-create-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        - name: RUNNER_COMMAND
          value: install
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        image: ghcr.io/capactio/pr/helm-runner:PR-252
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: app1-install-app1-install-app1-install-helm-install-helm
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-app1-install-helm-install-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: app1-install-app1-install-app1-install-helm-install-additional
          name: additional
          path: /additional.yaml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: output-app1-install-app1-install-postgresql
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-postgresql
          name: postgresql
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: output-app1-install-app1-install-database
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-database
          name: database
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: app1-config
          path: /typeinstance
      metadata: {}
      name: output-app1-install-app1-install-app1-config
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-app1-config
          name: app1-config
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: app1-helm-release
          path: /typeinstance
      metadata: {}
      name: output-app1-install-app1-install-app1-helm-release
      outputs:
        artifacts:
        - globalName: app1-install-app1-install-app1-helm-release
          name: app1-helm-release
          path: /typeinstance
    - inputs:
        artifacts:
        - name: input-parameters
        - name: postgresql
      metadata: {}
      name: app2-install
      outputs: {}
      steps:
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  host: {{ app2Host }}
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
          name: extract-app2-host
          template: app2-install-extract-app2-host-template
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.postgresql}}'
              name: postgresql
            - from: '{{steps.extract-app2-host.outputs.artifacts.render}}'
              name: input-parameters
          name: app2-install
          template: app2-install-app2-install-main
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app2-install-extract-app2-host-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - inputs:
        artifacts:
        - name: input-parameters
        - name: postgresql
          optional: true
      metadata: {}
      name: app2-install-app2-install-main
      outputs:
        artifacts:
        - from: '{{steps.helm-install.outputs.artifacts.additional}}'
          name: app2-config
      steps:
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.postgresql}}'
              name: postgresql
          name: install-db
          template: mock-app2-install-app2-install-main-install-db
      - - arguments:
            artifacts:
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: postgresql
            - name: database-input
              raw:
                data: |
                  name: app2db
                  owner: superuser
          name: create-db
          template: app2-install-app2-install-main-create-db-main
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  generateName: true
                  chart:
                    name: "app2-server"
                    repo: "https://helm.mox.sh"
                  output:{% raw %}
                    goTemplate:
                      version: "{{ .Values.image.tag }}"
                      host: '{{ template "app2-server.fullname" . }}'{% endraw %}
                  values:
                    postgresql:
                      enabled: false
                    databaseConnection:
                      host: "{{ host }}"
                      user: "{{ superuser.username }}"
                      password: "{{ superuser.password }}"
                      database: "{{ defaultDBName }}"
                    ingress:
                      enabled: true
                      hosts:
                      - host: app2.capact.local
                        paths: ['/']
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: input-parameters
          name: create-helm-args
          template: app2-install-app2-install-main-create-helm-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-helm-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
          name: helm-install
          template: app2-install-app2-install-main-helm-install-helm
      - - arguments:
            artifacts:
            - from: '{{steps.install-db.outputs.artifacts.postgresql}}'
              name: postgresql
          name: output-postgresql
          template: output-app2-install-app2-install-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: output-app2-install-app2-install-database
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.additional}}'
              name: app2-config
          name: output-app2-config
          template: output-app2-install-app2-install-app2-config
      - - arguments:
            artifacts:
            - from: '{{steps.helm-install.outputs.artifacts.helm-release}}'
              name: app2-helm-release
          name: output-app2-helm-release
          template: output-app2-install-app2-install-app2-helm-release
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
      metadata: {}
      name: mock-app2-install-app2-install-main-install-db
      outputs:
        artifacts:
        - name: postgresql
          path: output/postgresql
    - inputs:
        artifacts:
        - name: postgresql
        - name: database-input
      metadata: {}
      name: app2-install-app2-install-main-create-db-main
      outputs:
        artifacts:
        - from: '{{steps.create-db.outputs.artifacts.database}}'
          name: database
      steps:
      - - arguments:
            artifacts:
            - name: template
              raw:
                data: |
                  export PGPASSWORD=<@ superuser.password @>
                  PSQL_CMD="psql -h <@host@> -U <@superuser.username@> <@defaultDBName@> -c"
                  ${PSQL_CMD} "CREATE DATABASE <@name@>"
                  ${PSQL_CMD} "GRANT ALL PRIVILEGES ON DATABASE <@name@> TO <@owner@>"

                  cat <<EOF > /database.yml
                  name: <@name@>
                  owner: <@owner@>
                  tablespace: ""
                  EOF
            - from: '{{inputs.artifacts.postgresql}}'
              name: input-parameters
          name: render-create-db-script
          template: app2-install-app2-install-main-create-db-main-render-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.render-create-db-script.outputs.artifacts.render}}'
              name: template
            - from: '{{inputs.artifacts.database-input}}'
              name: input-parameters
          name: fill-params-in-create-db-script
          template: app2-install-app2-install-main-create-db-main-fill-params-in-create-db-script-template
      - - arguments:
            artifacts:
            - from: '{{steps.fill-params-in-create-db-script.outputs.artifacts.render}}'
              name: script
          name: create-db
          template: app2-install-app2-install-main-create-db-create-psql-db
      - - arguments:
            artifacts:
            - from: '{{steps.create-db.outputs.artifacts.database}}'
              name: database
          name: output-database
          template: output-app2-install-app2-install-main-create-db-database
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app2-install-app2-install-main-create-db-main-render-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app2-install-app2-install-main-create-db-main-fill-params-in-create-db-script-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        args:
        - sleep 1 && chmod +x /script.sh && /script.sh
        command:
        - bash
        - -c
        image: postgres:11
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: script
          path: /script.sh
      metadata: {}
      name: app2-install-app2-install-main-create-db-create-psql-db
      outputs:
        artifacts:
        - name: database
          path: /database.yml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: output-app2-install-app2-install-main-create-db-database
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-main-create-db-database
          name: database
          path: /typeinstance
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: app2-install-app2-install-main-create-helm-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        - name: RUNNER_COMMAND
          value: install
        - name: RUNNER_OUTPUT_HELM_RELEASE_FILE_PATH
          value: '{{outputs.artifacts.helm-release.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        image: ghcr.io/capactio/pr/helm-runner:PR-252
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: app2-install-app2-install-main-helm-install-helm
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-main-helm-install-helm-release
          name: helm-release
          path: /helm-release.yaml
        - globalName: app2-install-app2-install-main-helm-install-additional
          name: additional
          path: /additional.yaml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: output-app2-install-app2-install-postgresql
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-postgresql
          name: postgresql
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: database
          path: /typeinstance
      metadata: {}
      name: output-app2-install-app2-install-database
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-database
          name: database
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: app2-config
          path: /typeinstance
      metadata: {}
      name: output-app2-install-app2-install-app2-config
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-app2-config
          name: app2-config
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: app2-helm-release
          path: /typeinstance
      metadata: {}
      name: output-app2-install-app2-install-app2-helm-release
      outputs:
        artifacts:
        - globalName: app2-install-app2-install-app2-helm-release
          name: app2-helm-release
          path: /typeinstance
    - inputs: {}
      metadata: {}
      name: capact-root
      outputs: {}
      steps:
      - - arguments: {}
          name: inject-runner-context-step
          template: inject-runner-context
      - - arguments: {}
          name: populate-input-parameters-step
          template: populate-input-parameters
      - - arguments:
            artifacts:
            - from: '{{steps.populate-input-parameters-step.outputs.artifacts.input-parameters}}'
              name: input-parameters
          name: start-entrypoint
          template: stack-install
      - - arguments:
            artifacts:
            - from: '{{workflow.outputs.artifacts.stack-install-install-shared-db-postgresql}}'
              name: stack-install-install-shared-db-postgresql
            - from: '{{workflow.outputs.artifacts.stack-install-install-shared-db-postgres-install-helm-install-helm-release}}'
              name: stack-install-install-shared-db-postgres-install-helm-install-helm-release
            - from: '{{workflow.outputs.artifacts.app1-install-app1-install-app1-config}}'
              name: app1-install-app1-install-app1-config
            - from: '{{workflow.outputs.artifacts.app1-install-app1-install-app1-install-create-db-database}}'
              name: app1-install-app1-install-app1-install-create-db-database
            - from: '{{workflow.outputs.artifacts.app1-install-app1-install-app1-install-helm-install-helm-release}}'
              name: app1-install-app1-install-app1-install-helm-install-helm-release
            - from: '{{workflow.outputs.artifacts.app2-install-app2-install-app2-config}}'
              name: app2-install-app2-install-app2-config
            - from: '{{workflow.outputs.artifacts.app2-install-app2-install-main-create-db-database}}'
              name: app2-install-app2-install-main-create-db-database
            - from: '{{workflow.outputs.artifacts.app2-install-app2-install-main-helm-install-helm-release}}'
              name: app2-install-app2-install-main-helm-install-helm-release
            - name: payload
              raw:
                data: |
                  typeInstances:
                  - alias: stack-install-install-shared-db-postgresql
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.database.postgresql.config
                      revision: 0.1.0
                    value: null
                  - alias: stack-install-install-shared-db-postgres-install-helm-install-helm-release
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.helm.chart.release
                      revision: 0.1.0
                    value: null
                  - alias: app1-install-app1-install-app1-config
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.productivity.app1.config
                      revision: 0.1.0
                    value: null
                  - alias: app1-install-app1-install-app1-install-create-db-database
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.database.postgresql.database
                      revision: 0.1.0
                    value: null
                  - alias: app1-install-app1-install-app1-install-helm-install-helm-release
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.helm.chart.release
                      revision: 0.1.0
                    value: null
                  - alias: app2-install-app2-install-app2-config
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.productivity.app2.config
                      revision: 0.1.0
                    value: null
                  - alias: app2-install-app2-install-main-create-db-database
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.database.postgresql.database
                      revision: 0.1.0
                    value: null
                  - alias: app2-install-app2-install-main-helm-install-helm-release
                    attributes: []
                    createdBy: default/action
                    typeRef:
                      path: cap.type.helm.chart.release
                      revision: 0.1.0
                    value: null
                  usesRelations:
                  - from: stack-install-install-shared-db-postgresql
                    to: stack-install-install-shared-db-postgres-install-helm-install-helm-release
                  - from: app1-install-app1-install-app1-config
                    to: app1-install-app1-install-app1-install-helm-install-helm-release
                  - from: app1-install-app1-install-app1-config
                    to: stack-install-install-shared-db-postgresql
                  - from: app1-install-app1-install-app1-install-create-db-database
                    to: stack-install-install-shared-db-postgresql
                  - from: app2-install-app2-install-app2-config
                    to: app2-install-app2-install-main-helm-install-helm-release
                  - from: app2-install-app2-install-app2-config
                    to: stack-install-install-shared-db-postgresql
                  - from: app2-install-app2-install-main-create-db-database
                    to: stack-install-install-shared-db-postgresql
          name: upload-output-type-instances-step
          template: upload-output-type-instances
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: user-secret-volume
      inputs: {}
      metadata: {}
      name: populate-input-parameters
      outputs:
        artifacts:
        - name: input-parameters
          path: /input/input-parameters
      volumes:
      - name: user-secret-volume
        secret:
          items:
          - key: parameter-input-parameters
            path: input-parameters
          optional: false
          secretName: user-input
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: runner-context
          readOnly: true
      inputs: {}
      metadata: {}
      name: inject-runner-context
      outputs:
        artifacts:
        - globalName: runner-context
          name: runner-context
          path: /input/context.yaml
      volumes:
      - name: runner-context
        secret:
          items:
          - key: key
            path: context.yaml
          optional: false
          secretName: secret
    - container:
        env:
        - name: APP_ACTION
          value: UploadAction
        - name: APP_UPLOAD_CONFIG_PAYLOAD_FILEPATH
          value: /upload/payload
        - name: APP_UPLOAD_CONFIG_TYPE_INSTANCES_DIR
          value: /upload/typeInstances
        image: alpine:3.7
        imagePullPolicy: IfNotPresent
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: stack-install-install-shared-db-postgresql
          path: /upload/typeInstances/stack-install-install-shared-db-postgresql
        - name: stack-install-install-shared-db-postgres-install-helm-install-helm-release
          path: /upload/typeInstances/stack-install-install-shared-db-postgres-install-helm-install-helm-release
        - name: app1-install-app1-install-app1-config
          path: /upload/typeInstances/app1-install-app1-install-app1-config
        - name: app1-install-app1-install-app1-install-create-db-database
          path: /upload/typeInstances/app1-install-app1-install-app1-install-create-db-database
        - name: app1-install-app1-install-app1-install-helm-install-helm-release
          path: /upload/typeInstances/app1-install-app1-install-app1-install-helm-install-helm-release
        - name: app2-install-app2-install-app2-config
          path: /upload/typeInstances/app2-install-app2-install-app2-config
        - name: app2-install-app2-install-main-create-db-database
          path: /upload/typeInstances/app2-install-app2-install-main-create-db-database
        - name: app2-install-app2-install-main-helm-install-helm-release
          path: /upload/typeInstances/app2-install-app2-install-main-helm-install-helm-release
        - name: payload
          path: /upload/payload
      metadata: {}
      name: upload-output-type-instances
      outputs: {}
runnerInterface: cap.interface.runner.argo.run

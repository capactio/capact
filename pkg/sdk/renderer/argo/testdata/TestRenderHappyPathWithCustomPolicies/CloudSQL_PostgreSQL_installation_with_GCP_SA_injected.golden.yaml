args:
  workflow:
    arguments: {}
    entrypoint: capact-root
    templates:
    - inputs:
        artifacts:
        - name: input-parameters
      metadata: {}
      name: postgres-install
      outputs:
        artifacts:
        - from: '{{steps.cloudsql-run.outputs.artifacts.additional}}'
          name: postgresql
      steps:
      - - arguments:
            artifacts:
            - from: '{{inputs.artifacts.input-parameters}}'
              name: input-parameters
            - name: template
              raw:
                data: |
                  group: "sql"
                  command: "create"
                  generateName: true
                  instance: # this maps to https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/instances
                    databaseVersion: "POSTGRES_11"
                    region: "us-central"
                    defaultDBName: {{ defaultDBName }}
                    rootPassword: {{ superuser.password }}
                    settings:
                      tier: "db-g1-small"
                      ipConfiguration:
                        authorizedNetworks:
                          - name: internet
                            value: "0.0.0.0/0"
                  output:{% raw %}
                    goTemplate:
                      host: "{{ (index .DBInstance.IpAddresses 0).IpAddress  }}"
                      port: "{{ .Port }}"
                      defaultDBName: "{{ .DefaultDBName }}"
                      superuser:
                        username: "{{ .Username }}"
                        password: "{{ .Password }}"{% endraw %}
          name: create-cloudsql-args
          template: postgres-install-create-cloudsql-args-template
      - - arguments:
            artifacts:
            - from: '{{steps.create-cloudsql-args.outputs.artifacts.render}}'
              name: input-parameters
            - from: '{{workflow.outputs.artifacts.runner-context}}'
              name: runner-context
            - from: '{{workflow.outputs.artifacts.gcp-sa}}'
              name: gcp-sa
          name: cloudsql-run
          template: postgres-install-cloudsql-run-gcp
      - - arguments:
            artifacts:
            - from: '{{steps.cloudsql-run.outputs.artifacts.additional}}'
              name: postgresql
          name: output-postgresql
          template: output-postgresql
      - - arguments:
            artifacts:
            - from: '{{steps.cloudsql-run.outputs.artifacts.cloudsql-instance}}'
              name: cloudsql-instance
          name: output-cloudsql-instance
          template: output-cloudsql-instance
    - container:
        args:
        - /template.yml
        - /values.yml
        - --format=yaml
        - -o
        - /render.yml
        image: ghcr.io/capactio/jinja2:v2.11.2
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: template
          path: /template.yml
        - name: input-parameters
          path: /values.yml
      metadata: {}
      name: postgres-install-create-cloudsql-args-template
      outputs:
        artifacts:
        - name: render
          path: /render.yml
    - container:
        env:
        - name: RUNNER_CONTEXT_PATH
          value: '{{inputs.artifacts.runner-context.path}}'
        - name: RUNNER_ARGS_PATH
          value: '{{inputs.artifacts.input-parameters.path}}'
        - name: RUNNER_GCP_SERVICE_ACCOUNT_FILEPATH
          value: '{{inputs.artifacts.gcp-sa.path}}'
        - name: RUNNER_GCP_SERVICE_ACCOUNT_FILE_FORMAT
          value: YAML
        - name: RUNNER_OUTPUT_CLOUD_SQL_INSTANCE_FILE_PATH
          value: '{{outputs.artifacts.cloudsql-instance.path}}'
        - name: RUNNER_OUTPUT_ADDITIONAL_FILE_PATH
          value: '{{outputs.artifacts.additional.path}}'
        - name: RUNNER_LOGGER_DEV_MODE
          value: "true"
        image: ghcr.io/capactio/pr/cloudsql-runner:PR-252
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: gcp-sa
          path: /gcp/sa.yaml
        - name: input-parameters
          path: /runner-args
        - name: runner-context
          path: /runner-context
      metadata: {}
      name: postgres-install-cloudsql-run-gcp
      outputs:
        artifacts:
        - globalName: postgres-install-cloudsql-run-cloudsql-instance
          name: cloudsql-instance
          path: /instance.yaml
        - globalName: postgres-install-cloudsql-run-additional
          name: additional
          path: /additional.yaml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /typeinstance
      metadata: {}
      name: output-postgresql
      outputs:
        artifacts:
        - globalName: postgresql
          name: postgresql
          path: /typeinstance
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: cloudsql-instance
          path: /typeinstance
      metadata: {}
      name: output-cloudsql-instance
      outputs:
        artifacts:
        - globalName: cloudsql-instance
          name: cloudsql-instance
          path: /typeinstance
    - inputs: {}
      metadata: {}
      name: capact-root
      outputs: {}
      steps:
      - - arguments: {}
          name: inject-runner-context-step
          template: inject-runner-context
      - - arguments: {}
          name: inject-input-type-instances-2-0-step
          template: inject-input-type-instances-2-0
      - - arguments: {}
          name: populate-input-parameters-step
          template: populate-input-parameters
      - - arguments:
            artifacts:
            - from: '{{steps.populate-input-parameters-step.outputs.artifacts.input-parameters}}'
              name: input-parameters
          name: start-entrypoint
          template: postgres-install
      - - arguments:
            artifacts:
            - from: '{{workflow.outputs.artifacts.postgresql}}'
              name: postgresql
            - from: '{{workflow.outputs.artifacts.postgres-install-cloudsql-run-cloudsql-instance}}'
              name: postgres-install-cloudsql-run-cloudsql-instance
            - name: payload
              raw:
                data: |
                  typeInstances:
                  - alias: postgresql
                    attributes: []
                    createdBy: owner
                    typeRef:
                      path: cap.type.database.postgresql.config
                      revision: 0.1.0
                    value: null
                  - alias: postgres-install-cloudsql-run-cloudsql-instance
                    attributes: []
                    createdBy: owner
                    typeRef:
                      path: cap.type.gcp.cloudsql.instance
                      revision: 0.1.0
                    value: null
                  usesRelations:
                  - from: postgresql
                    to: postgres-install-cloudsql-run-cloudsql-instance
          name: upload-output-type-instances-step
          template: upload-output-type-instances
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: user-secret-volume
      inputs: {}
      metadata: {}
      name: populate-input-parameters
      outputs:
        artifacts:
        - name: input-parameters
          path: /input/input-parameters
      volumes:
      - name: user-secret-volume
        secret:
          items:
          - key: parameter-input-parameters
            path: input-parameters
          optional: false
          secretName: user-input
    - container:
        env:
        - name: APP_ACTION
          value: DownloadAction
        - name: APP_DOWNLOAD_CONFIG
          value: '{c268d3f5-8834-434b-bea2-b677793611c5,/gcp-sa.yaml}'
        - name: APP_LOCAL_HUB_ENDPOINT
          value: 'http://capact-hub-local.capact-system/graphql '
        - name: APP_PUBLIC_HUB_ENDPOINT
          value: http://capact-hub-public.capact-system/graphql
        image: alpine:3.7
        name: ""
        resources: {}
      inputs: {}
      metadata: {}
      name: inject-input-type-instances-2-0
      outputs:
        artifacts:
        - globalName: gcp-sa
          name: gcp-sa
          path: /gcp-sa.yaml
    - container:
        args:
        - sleep 1
        command:
        - sh
        - -c
        image: alpine:3.7
        name: ""
        resources: {}
        volumeMounts:
        - mountPath: /input
          name: runner-context
          readOnly: true
      inputs: {}
      metadata: {}
      name: inject-runner-context
      outputs:
        artifacts:
        - globalName: runner-context
          name: runner-context
          path: /input/context.yaml
      volumes:
      - name: runner-context
        secret:
          items:
          - key: key
            path: context.yaml
          optional: false
          secretName: secret
    - container:
        env:
        - name: APP_ACTION
          value: UploadAction
        - name: APP_UPLOAD_CONFIG_PAYLOAD_FILEPATH
          value: /upload/payload
        - name: APP_UPLOAD_CONFIG_TYPE_INSTANCES_DIR
          value: /upload/typeInstances
        - name: APP_LOCAL_HUB_ENDPOINT
          value: 'http://capact-hub-local.capact-system/graphql '
        - name: APP_PUBLIC_HUB_ENDPOINT
          value: http://capact-hub-public.capact-system/graphql
        image: alpine:3.7
        imagePullPolicy: IfNotPresent
        name: ""
        resources: {}
      inputs:
        artifacts:
        - name: postgresql
          path: /upload/typeInstances/postgresql
        - name: postgres-install-cloudsql-run-cloudsql-instance
          path: /upload/typeInstances/postgres-install-cloudsql-run-cloudsql-instance
        - name: payload
          path: /upload/payload
      metadata: {}
      name: upload-output-type-instances
      outputs: {}
runnerInterface: cap.interface.runner.argo.run

---
metadata:
  attributes: []
  displayName: Install Confluence
  description: Action which installs Confluence via Helm chart
  documentationURL: https://github.com/javimox/helm-charts/tree/master/charts/confluence-server
  iconURL: https://mox.sh/helm/
  maintainers:
    - email: team-dev@projectvoltron.dev
      name: Voltron Dev Team
  prefix: cap.implementation.atlassian.confluence
  name: install
  supportURL: https://mox.sh/helm/
revision: 0.1.0
signature:
  och: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
spec:
  additionalInput:
    typeInstances:
      - name: postgresql
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs:
          - GET
  additionalOutput:
    typeInstances:
      - name: confluence-helm-release
        typeRef:
          path: cap.type.helm.chart.release
          revision: 0.1.0
      - name: postgresql
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs:
          - GET
  outputTypeInstanceRelations:
    - typeInstanceName: confluence-config
      uses: [confluence-helm-release, postgresql]
  appVersion: 8.x.x
  implements:
    - path: cap.interface.productivity.confluence.install
      revision: 0.1.0
  imports:
    - alias: helm
      appVersion: 3.x.x
      interfaceGroupPath: cap.interface.runner.helm
      methods:
        - name: run
          revision: 0.1.0
    - alias: argo
      appVersion:
      interfaceGroupPath: cap.interface.runner.argo
      methods:
        - name: run
          revision: 0.1.0
    - alias: jinja2
      appVersion:
      interfaceGroupPath: cap.interface.templating.jinja2
      methods:
        - name: template
          revision: 0.1.0
    - alias: postgresql
      appVersion:
      interfaceGroupPath: cap.interface.database.postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0

  requires:
    - allOf: []
      anyOf: []
      oneOf:
        - typeRef:
            path: cap.core.type.platform.kubernetes
            revision: 0.1.0
          valueConstraints:
      prefix: cap.core.type.platform
  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: main
        templates:
          - name: main
            # Voltron Engine will inject the 'input-parameters' artifacts into the workflow entrypoint.
            # It contains the Interface parameters, in our case it is `confluence.install-input`.
            inputs:
              artifacts:
                - name: input-parameters
                - name: postgresql
                  optional: true
            outputs:
              artifacts:
                - name: confluence-config
                  from: "{{steps.helm-run.outputs.artifacts.additional}}"
            steps:
              # If the postgresql TypeInstance was not provided, then create it
              # using the imported 'postgresql.install' Interface.
              - - name: install-db
                  voltron-action: postgresql.install
                  voltron-outputTypeInstances:
                    - name: postgresql
                      from: postgresql
                  voltron-when: postgresql == nil
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                              password: okon
                            defaultDBName: postgres

              - - name: create-db
                  voltron-action: postgresql.create-db
                  voltron-outputTypeInstances:
                    - name: database # Defining the output TypeInstance 'database'
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        raw:
                          data: |
                            name: confluencedb 
                            owner: superuser

              # Here we prepare the input for the Helm runner. In the next two steps,
              # we use Jinja2 to render the input and fill the required parameters.
              # In the future there might be better way to do this.
              - - name: create-helm-args
                  voltron-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            command: "install"
                            generateName: true
                            chart:
                              name: "confluence-server"
                              repo: "https://helm.mox.sh"
                            output:{% raw %}
                              goTemplate:
                                version: "{{ .Values.image.tag }}"
                                host: '{{ template "confluence-server.fullname" . }}'{% endraw %}
                            values:
                              postgresql:
                                enabled: false
                              databaseConnection:
                                host: "{{ host }}"
                                user: "{{ superuser.username }}"
                                password: "{{ superuser.password }}"
                                database: "{{ defaultDBName }}"
                              ingress:
                                enabled: true
                                hosts:
                                - host: confluence.voltron.local
                                  paths: ['/']
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"

              # Execute the Helm runner, with the input parameters created in the previous step.
              # This will create the Helm chart and deploy our Confluence instance
              - - name: helm-run
                  voltron-action: helm.run
                  voltron-outputTypeInstances:
                    - name: confluence-config # Defining the output TypeInstance 'confluence-config'
                      from: additional
                    - name: confluence-helm-release # Defining the output TypeInstance 'confluence-helm-release'
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.create-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

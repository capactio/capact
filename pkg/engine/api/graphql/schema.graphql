"""
Time in ISO 8601 format
"""
scalar Timestamp

"""
Arbitrary data
"""
scalar Any

"""
Arbitrary input data in JSON string format
"""
scalar JSON

"""
Version in semantic versioning, e.g. 1.1.0
"""
scalar Version

"""
Full path of a given node, e.g. cap.core.type.platform.kubernetes
"""
scalar NodePath

"""
Regular expression for searching Action by name, e.g. upgrade-*
"""
scalar NameRegex

type ManifestReference {
  path: NodePath!
  revision: Version!
}

type ManifestReferenceWithOptionalRevision {
  path: NodePath!
  revision: Version
}

type TypeInstanceReference {
  id: ID!
  typeRef: ManifestReferenceWithOptionalRevision!
}

input TypeInstanceReferenceInput {
  id: ID!
  typeRef: ManifestReferenceInput!
}

"""
Client input of Action details, that are used for create and update Action operations (PUT-like operation)
"""
input ActionDetailsInput {
  name: String!
  input: ActionInputData

  """
  Contains reference to the Implementation or Interface manifest
  """
  actionRef: ManifestReferenceInput!

  """
  Specifies whether the Action performs server-side test without actually running the Action
  For now it only lints the rendered Argo manifests and does not execute any workflow.
  """
  dryRun: Boolean = false

  """
  Enables advanced rendering mode for Action. CURRENTLY NOT IMPLEMENTED.
  """
  advancedRendering: Boolean = false

  """
  Used to override the rendered action. CURRENTLY NOT IMPLEMENTED.
  """
  renderedActionOverride: JSON
}

input ManifestReferenceInput {
  """
  Full path for the manifest
  """
  path: NodePath!

  """
  If not provided, latest revision for a given manifest is used
  """
  revision: Version
}

"""
Client input that modifies input of a given Action
"""
input ActionInputData {
  """
  During rendering, it is validated against JSON schema from Interface of the resolved action
  """
  parameters: JSON

  """
  Required and optional TypeInstances for Action
  """
  typeInstances: [InputTypeInstanceData!]

  """
  Contains the optional one-time user policy, which is merged with other Capact policies
  """
  policy: PolicyInput
}

"""
Client input for Input TypeInstance
"""
input InputTypeInstanceData {
  name: String!
  id: ID!
}

"""
Action describes user intention to resolve & execute a given Interface or Implementation.
"""
type Action {
  name: String!
  createdAt: Timestamp!

  input: ActionInput
  output: ActionOutput

  """
  Contains reference to the Implementation or Interface manifest
  """
  actionRef: ManifestReference!

  """
  Indicates if user approved this Action to run
  """
  run: Boolean!

  """
  Indicates if user canceled the workflow. CURRENTLY NOT SUPPORTED.
  """
  cancel: Boolean!

  """
  Specifies whether the Action performs server-side test without actually running the Action.
  For now it only lints the rendered Argo manifests and does not execute any workflow.
  """
  dryRun: Boolean!

  renderedAction: Any

  """
  CURRENTLY NOT IMPLEMENTED.
  """
  renderingAdvancedMode: ActionRenderingAdvancedMode
  """
  CURRENTLY NOT IMPLEMENTED.
  """
  renderedActionOverride: Any

  status: ActionStatus
}

"""
Properties related to Action advanced rendering. CURRENTLY NOT IMPLEMENTED.
"""
type ActionRenderingAdvancedMode {
  enabled: Boolean!

  """
  Optional TypeInstances for current rendering iteration
  """
  typeInstancesForRenderingIteration: [InputTypeInstanceToProvide!]!
}

"""
Status of the Action
"""
type ActionStatus {
  phase: ActionStatusPhase!
  timestamp: Timestamp!
  message: String
  runner: RunnerStatus

  """
  CURRENTLY NOT IMPLEMENTED.
  """
  createdBy: UserInfo
  """
  CURRENTLY NOT IMPLEMENTED.
  """
  runBy: UserInfo
  """
  CURRENTLY NOT IMPLEMENTED.
  """
  canceledBy: UserInfo
}

"""
Additional Action status from the Runner
"""
type RunnerStatus {
  """
  Status of a given Runner e.g. Argo Workflow Runner status object with argoWorkflowRef field
  """
  status: Any
}

"""
Describes input of an Action
"""
type ActionInput {
  """
  Validated against JSON schema from Interface
  """
  parameters: Any
  typeInstances: [InputTypeInstanceDetails!]!

  """
  Contains the one-time user policy, which is merged with other Capact policies
  """
  policy: Policy

}

"""
Describes output of an Action
"""
type ActionOutput {
  typeInstances: [OutputTypeInstanceDetails!]!
}

interface TypeInstanceDetails {
  id: ID!
  name: String!
  typeRef: ManifestReference!
}

"""
Describes input TypeInstance of an Action
"""
type InputTypeInstanceDetails implements TypeInstanceDetails {
  id: ID!
  name: String!
  typeRef: ManifestReference!
  optional: Boolean!
}

"""
Describes optional input TypeInstance of advanced rendering iteration
"""
type InputTypeInstanceToProvide {
  name: String!
  typeRef: ManifestReference!
}

"""
Describes output TypeInstance of an Action
"""
type OutputTypeInstanceDetails implements TypeInstanceDetails {
  id: ID!
  name: String!
  typeRef: ManifestReference!
}

"""
Stores user information
"""
type UserInfo {
  username: String!
  groups: [String!]!
  extra: Any
}

"""
Set of filters for Action list
"""
input ActionFilter {
  phase: ActionStatusPhase
  nameRegex: NameRegex
  interfaceRef: ManifestReferenceInput
}

"""
Input used for continuing Action rendering in advanced mode
"""
input AdvancedModeContinueRenderingInput {
  """
  Optional TypeInstances for a given rendering iteration
  """
  typeInstances: [InputTypeInstanceData!]
}

"""
Current phase of the Action
"""
enum ActionStatusPhase {
  INITIAL
  BEING_RENDERED
  ADVANCED_MODE_RENDERING_ITERATION # Advanced mode only: new optional TypeInstances discovered. User can provide input TypeInstances
  READY_TO_RUN
  RUNNING
  BEING_CANCELED
  CANCELED
  SUCCEEDED
  FAILED
}

input PolicyInput {
  rules: [RulesForInterfaceInput!]!
}

input RulesForInterfaceInput {
  interface: ManifestReferenceInput!
  oneOf:     [PolicyRuleInput!]!
}

input PolicyRuleInput {
  implementationConstraints: PolicyRuleImplementationConstraintsInput
  injectTypeInstances: [TypeInstanceReferenceInput!]
}

input PolicyRuleImplementationConstraintsInput {
  """
  Refers a specific required TypeInstance by path and optional revision.
  """
  requires: [ManifestReferenceInput!]

  """
  Refers a specific Attribute by path and optional revision.
  """
  attributes: [ManifestReferenceInput!]

  """
  Refers a specific Implementation with exact path.
  """
  path: NodePath
}

type Policy {
  rules: [RulesForInterface!]!
}

type RulesForInterface {
  interface: ManifestReferenceWithOptionalRevision!
  oneOf:     [PolicyRule!]!
}

type PolicyRule {
  implementationConstraints: PolicyRuleImplementationConstraints
  injectTypeInstances: [TypeInstanceReference!]
}

type PolicyRuleImplementationConstraints {
  """
  Refers a specific required TypeInstance by path and optional revision.
  """
  requires: [ManifestReferenceWithOptionalRevision!]

  """
  Refers a specific Attribute by path and optional revision.
  """
  attributes: [ManifestReferenceWithOptionalRevision!]

  """
  Refers a specific Implementation with exact path.
  """
  path: NodePath
}

type Query {
  action(name: String!): Action
  actions(filter: ActionFilter): [Action!]!

  policy: Policy!
}

type Mutation {
  createAction(in: ActionDetailsInput): Action!
  runAction(name: String!): Action!

  """
  CURRENTLY NOT IMPLEMENTED.
  """
  cancelAction(name: String!): Action!
  updateAction(in: ActionDetailsInput!): Action!

  """
  CURRENTLY NOT IMPLEMENTED.
  """
  continueAdvancedRendering(
    actionName: String!
    in: AdvancedModeContinueRenderingInput!
  ): Action! # Advanced mode only: it is used to provide optional TypeInstances in each step of workflow render
  """
  DeleteAction does not remove the resources, which were created or modified by this Action.
  """
  deleteAction(name: String!): Action!

  updatePolicy(in: PolicyInput!): Policy!
}

# TODO: Directive for User authorization in https://cshark.atlassian.net/browse/SV-58

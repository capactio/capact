// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

// Action describes user intention to resolve & execute a given Interface or Implementation.
type Action struct {
	Name      string        `json:"name"`
	CreatedAt Timestamp     `json:"createdAt"`
	Input     *ActionInput  `json:"input"`
	Output    *ActionOutput `json:"output"`
	// Full path for the Implementation or Interface
	Path string `json:"path"`
	// Indicates if user approved this Action to run
	Run bool `json:"run"`
	// Indicates if user cancelled the workflow
	Cancel                 bool                         `json:"cancel"`
	RenderedAction         interface{}                  `json:"renderedAction"`
	RenderingAdvancedMode  *ActionRenderingAdvancedMode `json:"renderingAdvancedMode"`
	RenderedActionOverride interface{}                  `json:"renderedActionOverride"`
	Status                 *ActionStatus                `json:"status"`
}

// Client input of Action details, that are used for create and update Action operations (PUT-like operation)
type ActionDetailsInput struct {
	Name                   string           `json:"name"`
	Input                  *ActionInputData `json:"input"`
	Action                 string           `json:"action"`
	AdvancedRendering      *bool            `json:"advancedRendering"`
	RenderedActionOverride *JSON            `json:"renderedActionOverride"`
}

// Set of filters for Action list
type ActionFilter struct {
	Condition *ActionStatusCondition `json:"condition"`
}

// Describes input of an Action
type ActionInput struct {
	Parameters interface{}      `json:"parameters"`
	Artifacts  []*InputArtifact `json:"artifacts"`
}

// Client input that modifies input of a given Action
type ActionInputData struct {
	Parameters *JSON                `json:"parameters"`
	Artifacts  []*InputArtifactData `json:"artifacts"`
}

// Describes output of an Action
type ActionOutput struct {
	Artifacts []*OutputArtifact `json:"artifacts"`
}

// Properties related to Action advanced rendering
type ActionRenderingAdvancedMode struct {
	Enabled                        bool             `json:"enabled"`
	ArtifactsForRenderingIteration []*InputArtifact `json:"artifactsForRenderingIteration"`
}

// Status of the Action
type ActionStatus struct {
	Condition   ActionStatusCondition `json:"condition"`
	Timestamp   Timestamp             `json:"timestamp"`
	Message     *string               `json:"message"`
	Runner      *RunnerStatus         `json:"runner"`
	CreatedBy   *UserInfo             `json:"createdBy"`
	RunBy       *UserInfo             `json:"runBy"`
	CancelledBy *UserInfo             `json:"cancelledBy"`
}

// Input used for continuing Action rendering in advanced mode.
type AdvancedModeContinueRenderingInput struct {
	Artifacts []*InputArtifactData `json:"artifacts"`
}

// Describes input artifact of an Action
type InputArtifact struct {
	Name           string `json:"name"`
	TypePath       string `json:"typePath"`
	TypeInstanceID string `json:"typeInstanceID"`
	Optional       bool   `json:"optional"`
}

// Client input for Input Artifact
type InputArtifactData struct {
	Name           string `json:"name"`
	TypeInstanceID string `json:"typeInstanceID"`
}

// Describes output artifact of an Action
type OutputArtifact struct {
	Name           string `json:"name"`
	TypeInstanceID string `json:"typeInstanceID"`
	TypePath       string `json:"typePath"`
}

// Additional Action status from the Runner
type RunnerStatus struct {
	Interface string      `json:"interface"`
	Status    interface{} `json:"status"`
}

// Stores user information
type UserInfo struct {
	Username string      `json:"username"`
	Groups   []string    `json:"groups"`
	Extra    interface{} `json:"extra"`
}

// Current state of the Action
type ActionStatusCondition string

const (
	ActionStatusConditionInitial                        ActionStatusCondition = "INITIAL"
	ActionStatusConditionBeingRendered                  ActionStatusCondition = "BEING_RENDERED"
	ActionStatusConditionAdvancedModeRenderingIteration ActionStatusCondition = "ADVANCED_MODE_RENDERING_ITERATION"
	ActionStatusConditionReadyToRun                     ActionStatusCondition = "READY_TO_RUN"
	ActionStatusConditionRunning                        ActionStatusCondition = "RUNNING"
	ActionStatusConditionBeingCancelled                 ActionStatusCondition = "BEING_CANCELLED"
	ActionStatusConditionCancelled                      ActionStatusCondition = "CANCELLED"
	ActionStatusConditionSucceeded                      ActionStatusCondition = "SUCCEEDED"
	ActionStatusConditionFailed                         ActionStatusCondition = "FAILED"
)

var AllActionStatusCondition = []ActionStatusCondition{
	ActionStatusConditionInitial,
	ActionStatusConditionBeingRendered,
	ActionStatusConditionAdvancedModeRenderingIteration,
	ActionStatusConditionReadyToRun,
	ActionStatusConditionRunning,
	ActionStatusConditionBeingCancelled,
	ActionStatusConditionCancelled,
	ActionStatusConditionSucceeded,
	ActionStatusConditionFailed,
}

func (e ActionStatusCondition) IsValid() bool {
	switch e {
	case ActionStatusConditionInitial, ActionStatusConditionBeingRendered, ActionStatusConditionAdvancedModeRenderingIteration, ActionStatusConditionReadyToRun, ActionStatusConditionRunning, ActionStatusConditionBeingCancelled, ActionStatusConditionCancelled, ActionStatusConditionSucceeded, ActionStatusConditionFailed:
		return true
	}
	return false
}

func (e ActionStatusCondition) String() string {
	return string(e)
}

func (e *ActionStatusCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionStatusCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionStatusCondition", str)
	}
	return nil
}

func (e ActionStatusCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

scalar Timestamp
scalar Any

input ActionDetailsInput {
    name: String!
    input: ActionInputData
    action: String! # full path for the Implementation or Interface
}

input ActionInputData {
    parameters: Any # during rendering, it is validated against JSON schema from Interface of the resolved action
    artifacts: [InputArtifactData!]
}

input InputArtifactData {
    alias: String!
    typeInstancePath: String! # Full path of the TypeInstance
}

type Action {
    id: ID!
    name: String!
    createdAt: Timestamp!

    input: ActionInput # resolver which reads from Secret/ConfigMap
    output: ActionOutput

    action: String! # full path for the Implementation or Interface
    renderedAction: Any

    createdBy: UserInfo
    runBy: UserInfo
    cancelledBy: UserInfo

    status: ActionStatus
}

type ActionStatus {
    condition: ActionStatusCondition!
    timestamp: Timestamp!
    message: String

    runner: Any # status of a given Runner e.g. Argo Workflow Runner status object with argoWorkflowRef field
}

type ActionInput {
    parameters: Any # validated against JSON schema from Interface
    artifacts: [InputArtifact!]!
}

type ActionOutput {
    parameters: Any # validated against JSON schema from Interface
    artifacts: [OutputArtifact!]!
}

type InputArtifact {
    alias: String!
    typeInstancePath: String! # Full path of the TypeInstance
    typePath: String! # Full path of the corresponding Type
    value: Any # resolver for TypeInstance value
    necessity: ArtifactNecessity!
}

type OutputArtifact {
    name: String!
    typeInstancePath: String! # Full path of the TypeInstance
    typePath: String! # Full path of the corresponding Type
    value: Any # resolver for TypeInstance value
}

enum ArtifactNecessity {
    REQUIRED, OPTIONAL
}

type UserInfo {
    username: String!
    groups: [String!]!
    extra: Any
}

input ActionFilter {
    condition: ActionStatusCondition
}

enum ActionStatusCondition {
    INITIAL,
    BEING_RENDERED,
    READY_TO_RUN,
    RUNNING,
    BEING_CANCELLED,
    CANCELLED,
    SUCCEEDED,
    FAILED
}

type Query {
    action(id: ID!): Action
    actions(filter: [ActionFilter!]): [Action!]!
}

type Mutation {
    createAction(in: ActionDetailsInput): Action!
    runAction(id: ID!): Action!
    cancelAction(id: ID!): Action!
    updateAction(id: ID!, in: ActionDetailsInput): Action!
    updateActionInput(id: ID!, in: ActionInputData): Action! # it is usedbe used to provide optional artifacts in each step of workflow render
    deleteAction(id: ID!): Action!
}

# TODO: Directive for User authorization in https://cshark.atlassian.net/browse/SV-58

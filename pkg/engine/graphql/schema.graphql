"""
Time in ISO 8601 format
"""
scalar Timestamp

"""
Arbitrary data
"""
scalar Any

"""
Client input of Action details, that are used for create and update Action operations (PUT-like operation)
"""
input ActionDetailsInput {
    input: ActionInputData
    action: String! # full path for the Implementation or Interface
    advancedRendering: Boolean = false # Enables advance rendering mode of Action
}

"""
Client input that modifies input of a given Action
"""
input ActionInputData {
    parameters: Any # during rendering, it is validated against JSON schema from Interface of the resolved action
    artifacts: [InputArtifactData!] # required and optional artifacts from root workflow
}

"""
Client input for Input Artifact
"""
input InputArtifactData {
    alias: String!
    typeInstanceID: ID!
}

"""
Action describes user intention to resolve & execute a given Implementation
"""
type Action {
    id: ID!
    createdAt: Timestamp!

    input: ActionInput # resolver which reads from Secret/ConfigMap
    output: ActionOutput

    action: String! # full path for the Implementation or Interface
    renderedAction: Any
    renderingAdvancedMode: ActionRenderingAdvancedMode

    createdBy: UserInfo
    runBy: UserInfo
    cancelledBy: UserInfo

    status: ActionStatus
}

"""
Properties related to Action advanced rendering
"""
type ActionRenderingAdvancedMode {
    enabled: Boolean!
    artifactsForRenderingIteration: [InputArtifact!]! # Optional Artifacts for current rendering iteration
}

"""
Status of the Action
"""
type ActionStatus {
    condition: ActionStatusCondition!
    timestamp: Timestamp!
    message: String
    runner: RunnerStatus
}

"""
Additional Action status from the built-in Runner
"""
type RunnerStatus {
    type: String! # Type of a runner
    status: Any # status of a given Runner e.g. Argo Workflow Runner status object with argoWorkflowRef field
}

"""
Describes input of an Action
"""
type ActionInput {
    parameters: Any # validated against JSON schema from Interface
    artifacts: [InputArtifact!]!
}

"""
Describes output of an Action
"""
type ActionOutput {
    parameters: Any # validated against JSON schema from Interface
    artifacts: [OutputArtifact!]!
}

"""
Describes input artifact of an Action
"""
type InputArtifact {
    alias: String!
    typePath: String! # Full path of the corresponding Type
    typeInstanceID: ID
    value: Any # resolver for TypeInstance value
    optional: Boolean!
}

"""
Describes output artifact of an Action
"""
type OutputArtifact {
    name: String!
    typeInstanceID: ID!
    typePath: String! # Full path of the corresponding Type
    value: Any # resolver for TypeInstance value
}

"""
Stores user information
"""
type UserInfo {
    username: String!
    groups: [String!]!
    extra: Any
}

"""
Set of filters for Action list
"""
input ActionFilter {
    condition: ActionStatusCondition
}

"""
Input used for continuing Action rendering in advanced mode.
"""
input AdvancedModeContinueRenderingInput {
    artifacts: [InputArtifactData!] # optional artifacts for a given rendering iteration
}

"""
Current state of the Action
"""
enum ActionStatusCondition {
    INITIAL,
    BEING_RENDERED,
    ADVANCED_MODE_RENDERING_ITERATION, # Advanced mode only: new optional artifacts discovered. User has to provide input artifacts
    READY_TO_RUN,
    RUNNING,
    BEING_CANCELLED,
    CANCELLED,
    SUCCEEDED,
    FAILED
}

type Query {
    action(id: ID!): Action
    actions(filter: [ActionFilter!]): [Action!]!
}

type Mutation {
    createAction(in: ActionDetailsInput): Action!
    runAction(id: ID!): Action!
    cancelAction(id: ID!): Action!
    updateAction(id: ID!, in: ActionDetailsInput): Action!
    continueAdvancedRendering(actionID: ID!, in: AdvancedModeContinueRenderingInput!): Action! # Advanced mode only: it is used to provide optional artifacts in each step of workflow render
    deleteAction(id: ID!): Action!
}

# TODO: Directive for User authorization in https://cshark.atlassian.net/browse/SV-58

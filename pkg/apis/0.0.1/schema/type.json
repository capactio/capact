{
  "$schema": "http://json-schema.org/draft-07/schema",
  "type": "object",
  "title": "The OCF Type",
  "description": "Primitive, that holds the JSONSchema which describes that Type. It’s also used for validation. There are core and custom Types. Type can be also a composition of other Types.",
  "required": [
    "ocfVersion",
    "kind",
    "metadata",
    "spec"
  ],
  "allOf": [
    {
      "$ref": "file://pkg/apis/0.0.1/schema/common.json"
    },
    {
      "properties": {
        "metadata": {
          "$id": "#/properties/metadata",
          "type": "object",
          "title": "The metadata schema",
          "description": "A container for the Type metadata definitions.",
          "required": [
            "name",
            "description",
            "maintainers"
          ],
          "properties": {
            "name": {
              "$id": "#/properties/metadata/properties/name",
              "type": "string",
              "title": "The name of Type.",
              "description": "The name of Type that uniquely identifies this object within the current sub-tree. Must be a non-empty string. We recommend using a CLI-friendly name.",
              "examples": [
                "config"
              ]
            },
            "prefix": {
              "$id": "#/properties/metadata/properties/prefix",
              "type": "string",
              "title": "The prefix value is automatically set when storing manifest in OCH.",
              "description": "The prefix value is automatically computed and set when storing manifest in OCH.",
              "examples": [
                "cap.type.database.mysql"
              ]
            },
            "displayName": {
              "$id": "#/properties/metadata/properties/displayName",
              "type": "string",
              "title": "The display name of the Type.",
              "description": "The name of the Type to be displayed in graphical clients.",
              "examples": [
                "MySQL Config"
              ]
            },
            "description": {
              "$id": "#/properties/metadata/properties/description",
              "type": "string",
              "title": "A short description.",
              "description": "A short description of the Type. Must be a non-empty string."
            },
            "maintainers": {
              "$id": "#/properties/metadata/properties/maintainers",
              "type": "array",
              "title": "The maintainers schema",
              "description": "The list of maintainers with contact information.",
              "examples": [
                [
                  {
                    "email": "foo@example.com",
                    "name": "Foo Bar",
                    "url": "https://foo.bar"
                  },
                  {
                    "email": "foo@example.com",
                    "name": "Foo Bar",
                    "url": "https://foo.bar"
                  }
                ]
              ],
              "additionalItems": false,
              "items": {
                "$id": "#/properties/metadata/properties/maintainers/items",
                "anyOf": [
                  {
                    "$id": "#/properties/metadata/properties/maintainers/items/anyOf/0",
                    "type": "object",
                    "title": "Holds contact information.",
                    "examples": [
                      {
                        "email": "foo@example.com",
                        "name": "Foo Bar",
                        "url": "https://example.com"
                      }
                    ],
                    "required": [
                      "email"
                    ],
                    "properties": {
                      "email": {
                        "$id": "#/properties/metadata/properties/maintainers/items/anyOf/0/properties/email",
                        "type": "string",
                        "title": "Email address of the person.",
                        "examples": [
                          "foo@example.com"
                        ]
                      },
                      "name": {
                        "$id": "#/properties/metadata/properties/maintainers/items/anyOf/0/properties/name",
                        "type": "string",
                        "title": "Name of the person.",
                        "examples": [
                          "Foo Bar"
                        ]
                      },
                      "url": {
                        "$id": "#/properties/metadata/properties/maintainers/items/anyOf/0/properties/url",
                        "type": "string",
                        "title": "URL of the person’s site.",
                        "examples": [
                          "https://example.com"
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "documentationURL": {
              "$id": "#/properties/metadata/properties/documentationURL",
              "type": "string",
              "title": "Link to documentation page for the Type.",
              "description": "Link to documentation page for the Type.",
              "examples": [
                "https://example.com/docs"
              ]
            },
            "supportURL": {
              "$id": "#/properties/metadata/properties/supportURL",
              "type": "string",
              "title": "Link to support page for the Type.",
              "description": "Link to support page for the Type.",
              "examples": [
                "https://example.com/online-support"
              ]
            },
            "iconURL": {
              "$id": "#/properties/metadata/properties/iconURL",
              "type": "string",
              "title": "The URL to an icon or a data URL containing an icon.",
              "description": "The URL to an icon or a data URL containing an icon.",
              "examples": [
                "https://example.com/favicon.ico"
              ]
            }
          },
          "additionalProperties": false
        },
        "spec": {
          "$id": "#/properties/spec",
          "type": "object",
          "title": "The spec schema",
          "description": "A container for the Type specification definition.",
          "required": [
            "jsonSchema"
          ],
          "allOf": [
            {
              "properties": {
                "jsonSchema": {
                  "$ref": "file://pkg/apis/0.0.1/schema/json-schema-type.json"
                }
              }
            },
            {
              "properties": {
                "additionalRefs": {
                  "$id": "#/properties/spec/properties/additionalRefs",
                  "type": "array",
                  "title": "List of the full path of additional parent nodes the Type is attached to.",
                  "description": "List of the full path of additional parent nodes the Type is attached to. The parent nodes MUST reside under “cap.core.type” or “cap.type” subtree. The connection means that the Type becomes a child of the referenced parent nodes. In a result, the Type has multiple parents.",
                  "examples": [
                    [
                      "cap.core.type.platform"
                    ]
                  ],
                  "additionalProperties": false,
                  "additionalItems": false,
                  "uniqueItems": true,
                  "items": {
                    "type": "string",
                    "title": "Full path of additional parent nodes the Type is attached to"
                  }
                }
              }
            }
          ]
        }
      }
    }
  ]
}
